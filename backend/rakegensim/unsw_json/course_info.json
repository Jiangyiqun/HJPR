{
    "COMP1000": {
        "courseCode": "COMP1000",
        "skills": [
            "world wide web www dependent activities",
            "world wide web",
            "powerful computer tools yet",
            "implement effective spreadsheet",
            "similar spreadsheet",
            "database packages",
            "database applications",
            "database application",
            "spreadsheet",
            "spreadsheets",
            "security",
            "internet",
            "design",
            "databases",
            "computers",
            "commerce",
            "browsers"
        ],
        "courseDesc": "\"World wide web WWW  dependent activities have become an essential part of our existence and yet many of us do not know much about how they works. In the first part of this course, we introduce the abstract features of the internet and the software that makes it so powerful. Knowledge about the architecure of the internet, world wide web, browsers, seach engines, e-commerce, security, etc. will be helpful in using the internet more effectively as well as becoming aware of the several pifalls associated with this modern technology.   Spreadsheets and databases are two of the most commonly used and powerful computer tools yet they are often poorly utilised and the reasons for using one rather than the other are poorly understood. Many people purchase Microsoft Office which comes bundled with Microsoft Excel and Microsoft Access - a spreadsheet and a database application - yet while many people have some familiarity with Microsoft Excel, Microsoft Access is rarely utilised. This course aims to explain in straightforward terms the concepts underlying both of these powerful pieces of software so that students can exploit them effectively for both their studies and future careers. It will investigate how to design and implement effective spreadsheet and database applications. Students should also be able to transfer these skills to other, similar spreadsheet and database packages. Students will be expected to have personal copies of Microsoft Excel and Microsoft Access on their own computers.   Note s : This course may not be taken by students enrolled in an Engineering program.     \"",
        "similarCourses": [
            "COMP1531",
            "COMP6721",
            "COMP9311",
            "COMP2521",
            "COMP4314",
            "COMP6741",
            "COMP9315",
            "COMP6447",
            "COMP9153",
            "COMP9321",
            "COMP6731",
            "COMP3153",
            "COMP6843",
            "COMP6443",
            "COMP6441"
        ],
        "courseUrl": "https://www.handbook.unsw.edu.au/undergraduate/courses/2019/COMP1000"
    },
    "COMP1010": {
        "courseCode": "COMP1010",
        "skills": [
            "construct new software systems",
            "software systems work",
            "modern society",
            "critical skill",
            "computational thinking",
            "understanding",
            "solving",
            "foundations",
            "computing"
        ],
        "courseDesc": "\"Computational thinking is a critical skill in modern society. This course aims to provide you with an understanding of the foundations of computing, how software systems work, and how to construct new software systems. By the end of the course, you will have produced an application  app  of your choice, solving a problem that's important to you.     \"",
        "similarCourses": [
            "COMP6442",
            "COMP4511",
            "COMP6447",
            "COMP4181",
            "COMP9181",
            "COMP2521",
            "COMP4128",
            "COMP1511",
            "COMP3222",
            "COMP9222",
            "COMP3153",
            "COMP6841",
            "COMP9153",
            "COMP6441",
            "COMP1521"
        ],
        "courseUrl": "https://www.handbook.unsw.edu.au/undergraduate/courses/2019/COMP1010"
    },
    "COMP1400": {
        "courseCode": "COMP1400",
        "skills": [
            "object oriented programming",
            "interactive multimedia applications",
            "delivery",
            "construction"
        ],
        "courseDesc": "\"An introduction to the concepts and techniques of object oriented programming with a focus on the construction of interactive multimedia applications. Delivery is through lectures and computer lab classes. Assessment will be via a number of in-class exercises and staged assignments.     \"",
        "similarCourses": [
            "COMP9021",
            "COMP1917",
            "COMP4314",
            "COMP1911",
            "COMP9018",
            "COMP2911",
            "COMP3900",
            "COMP9900",
            "COMP4181",
            "COMP9181",
            "COMP3411",
            "COMP4511",
            "COMP9161",
            "COMP9116",
            "COMP1531"
        ],
        "courseUrl": "https://www.handbook.unsw.edu.au/undergraduate/courses/2019/COMP1400"
    },
    "COMP1511": {
        "courseCode": "COMP1511",
        "skills": [
            "high level programming language",
            "storage structures memory",
            "program structures statements",
            "data types numeric",
            "data structures arrays",
            "reflective practice",
            "code quality",
            "computing",
            "testing",
            "teamwork",
            "pointers",
            "lists",
            "iteration",
            "interest",
            "functions",
            "character",
            "analysis",
            "algorithms",
            "addresses"
        ],
        "courseDesc": "\"An introduction to problem-solving via programming, which aims to have students develop proficiency in using a high level programming language. Topics: algorithms, program structures  statements, sequence, selection, iteration, functions, data types  numeric, character, data structures  arrays, tuples, pointers, lists, storage structures  memory, addresses, introduction to analysis of algorithms, testing, code quality, teamwork, and reflective practice. The course includes extensive practical work in labs and programming projects.   Additional Information   This course should be taken by all CSE majors, and any other students who have an interest in computing or who wish to be extended. It does not require any prior computing knowledge or experience.   COMP1511 leads on to COMP1521, COMP1531, COMP2511 and COMP2521, which form the core of the study of computing at UNSW and which are pre-requisites for the full range of further computing courses.   Due to overlapping material, students who complete COMP1511 may not also enrol in COMP1911 or COMP1921.     \"",
        "similarCourses": [
            "COMP2521",
            "COMP1917",
            "COMP1911",
            "COMP9945",
            "COMP9596",
            "COMP2511",
            "COMP1521",
            "COMP1927",
            "COMP9021",
            "COMP4511",
            "COMP1010",
            "COMP6442",
            "COMP1921",
            "COMP9441",
            "COMP3441"
        ],
        "courseUrl": "https://www.handbook.unsw.edu.au/undergraduate/courses/2019/COMP1511"
    },
    "COMP1521": {
        "courseCode": "COMP1521",
        "skills": [
            "become effective programmers",
            "system architectures",
            "level programs",
            "computer architecture",
            "number representation",
            "manipulates data",
            "level programming",
            "operating systems",
            "machine code",
            "level view",
            "level issues",
            "systems",
            "machine",
            "synchronisation",
            "programmer",
            "portability",
            "performance",
            "parallelism",
            "networks",
            "memory",
            "concurrency",
            "computing",
            "compilers",
            "communication"
        ],
        "courseDesc": "\"This course provides a programmer's view on how a computer system executes programs, manipulates data and communicates. It enables students to become effective programmers in dealing with issues of performance, portability, and robustness. It is typically taken in the semester after completing COMP1511, but could be delayed and taken later. It serves as a foundation for later courses on networks, operating systems, computer architecture and compilers, where a deeper understanding of systems-level issues is required.   Topics: Introduction to the systems-level view of computing, number representation, machine-level programming, representing high-level programs in machine code, memory, input/output, system architectures, operating systems, networks, parallelism/concurrency, communication/synchronisation. Labs and assignment work in C and machine code.     \"",
        "similarCourses": [
            "COMP1531",
            "COMP2521",
            "COMP1511",
            "COMP3891",
            "COMP9414",
            "COMP3231",
            "COMP9283",
            "COMP3411",
            "COMP9444",
            "COMP9201",
            "COMP2511",
            "COMP1010",
            "COMP6442",
            "COMP9242",
            "COMP2121"
        ],
        "courseUrl": "https://www.handbook.unsw.edu.au/undergraduate/courses/2019/COMP1521"
    },
    "COMP1531": {
        "courseCode": "COMP1531",
        "skills": [
            "fundamental database techniques software engineering methodologies",
            "software engineering principles",
            "modern development methodologies",
            "maintenance data modelling",
            "based system architecture",
            "software engineering",
            "techniques web",
            "software system",
            "development practices",
            "web platforms",
            "simple web",
            "conceptual modeling",
            "verification",
            "validation",
            "tools",
            "teamwork",
            "specification",
            "programming",
            "processes",
            "operation",
            "measurements",
            "design",
            "deployment",
            "deploy",
            "construction",
            "build",
            "analysis"
        ],
        "courseDesc": "\"This course provides an introduction to software engineering principles: basic software lifecycle concepts, modern development methodologies, conceptual modeling and how these activities relate to programming. It also introduces the basic notions of team-based project management via conducting a project to design, build and deploy a simple web-based application. It is typically taken in the semester after completing COMP1511, but could be delayed and taken later. It provides essential background for the teamwork and project management required in many later courses.   The goal of this course is to expose the students to:     basic elements of software engineering - derived from the lifecycle of a software system, including requirements elicitation, analysis and specification; design; construction; verification and validation; deployment; and operation and maintenance   data modelling and fundamental database techniques   software engineering methodologies, processes, measurements, tools and techniques   Web-based system architecture and development practices on Web platforms       \"",
        "similarCourses": [
            "COMP1521",
            "COMP9311",
            "COMP3900",
            "COMP9900",
            "COMP9322",
            "COMP9321",
            "COMP9323",
            "COMP2521",
            "COMP9242",
            "COMP2511",
            "COMP4511",
            "COMP9211",
            "COMP4920",
            "COMP3211",
            "COMP9116"
        ],
        "courseUrl": "https://www.handbook.unsw.edu.au/undergraduate/courses/2019/COMP1531"
    },
    "COMP1911": {
        "courseCode": "COMP1911",
        "skills": [
            "underlying memory representation",
            "high level language",
            "laboratory programming exercises",
            "fundamental programming concepts",
            "programming using",
            "programming style",
            "program testing",
            "practical experience",
            "objective",
            "debugging"
        ],
        "courseDesc": "\"note: An exclusion exists between COMP1911 and COMP1917.The objective of this course is for students to develop proficiency in programming using a high level language. Topics covered include: fundamental programming concepts, program testing and debugging, the underlying memory representation of data, programming style. Practical experience of these topics is supplied by laboratory programming exercises and assignments.     \"",
        "similarCourses": [
            "COMP1917",
            "COMP1921",
            "COMP9021",
            "COMP1511",
            "COMP1400",
            "COMP2511",
            "COMP1927",
            "COMP2041",
            "COMP4001",
            "COMP2521",
            "COMP3411",
            "COMP4920",
            "COMP9102",
            "COMP9414",
            "COMP6733"
        ],
        "courseUrl": "https://www.handbook.unsw.edu.au/undergraduate/courses/2019/COMP1911"
    },
    "COMP1917": {
        "courseCode": "COMP1917",
        "skills": [
            "underlying memory representation",
            "high level language",
            "laboratory programming exercises",
            "fundamental programming concepts",
            "programming using",
            "programming style",
            "program testing",
            "practical experience",
            "objective",
            "debugging"
        ],
        "courseDesc": "\"The objective of this course is for students to develop proficiency in programming using a high level language. Topics covered include: fundamental programming concepts, program testing and debugging, the underlying memory representation of data, programming style. Practical experience of these topics is supplied by laboratory programming exercises and assignments.     \"",
        "similarCourses": [
            "COMP1911",
            "COMP9021",
            "COMP1511",
            "COMP1921",
            "COMP1400",
            "COMP1927",
            "COMP2511",
            "COMP2041",
            "COMP4001",
            "COMP4920",
            "COMP9102",
            "COMP3411",
            "COMP2521",
            "COMP6733",
            "COMP2911"
        ],
        "courseUrl": "https://www.handbook.unsw.edu.au/undergraduate/courses/2019/COMP1917"
    },
    "COMP1921": {
        "courseCode": "COMP1921",
        "skills": [
            "simple binary trees",
            "secure coding practice",
            "low level structure",
            "team programming",
            "stack frames",
            "problem solving",
            "linked lists",
            "memory allocation",
            "memory",
            "style",
            "recursion",
            "approaches",
            "abstraction"
        ],
        "courseDesc": "\"Covers the topics of COMP1917 not covered in COMP1911. Including: approaches to problem solving, abstraction, low level structure of memory, memory allocation, stack frames, secure coding practice, recursion, linked lists.Introduction to ADTs. Introduction to simple binary trees. Also reinforces concepts introduced in COMP1911: style, unti testing, team programming, groupwork.     \"",
        "similarCourses": [
            "COMP1911",
            "COMP1917",
            "COMP1927",
            "COMP1511",
            "COMP4128",
            "COMP6445",
            "COMP6845",
            "COMP9021",
            "COMP3601",
            "COMP4129",
            "COMP6443",
            "COMP2521",
            "COMP6441",
            "COMP3222",
            "COMP9222"
        ],
        "courseUrl": "https://www.handbook.unsw.edu.au/undergraduate/courses/2019/COMP1921"
    },
    "COMP1927": {
        "courseCode": "COMP1927",
        "skills": [
            "formal examination",
            "data types",
            "data structures",
            "associated algorithms",
            "programming assignments",
            "programming",
            "trees",
            "lists",
            "large",
            "interfaces",
            "graphs",
            "complexity",
            "abstraction"
        ],
        "courseDesc": "\"Programming in the large, abstraction and ADTs, interfaces, complexity. Data types and data structures: lists, trees, graphs; and associated algorithms. Programming assignments, laboratory exercises, formal examination. Preparation work may be available for interested students before the course starts  see course outline for details.     \"",
        "similarCourses": [
            "COMP9024",
            "COMP2521",
            "COMP1921",
            "COMP1917",
            "COMP1511",
            "COMP3121",
            "COMP2911",
            "COMP9021",
            "COMP1911",
            "COMP9242",
            "COMP4128",
            "COMP9322",
            "COMP6741",
            "COMP9101",
            "COMP9945"
        ],
        "courseUrl": "https://www.handbook.unsw.edu.au/undergraduate/courses/2019/COMP1927"
    },
    "COMP2041": {
        "courseCode": "COMP2041",
        "skills": [
            "practical work involving programming",
            "software system decomposition",
            "software development life",
            "code improvement techniques",
            "debugging techniques",
            "version control",
            "configuration management",
            "command languages",
            "programming",
            "testing",
            "reliability",
            "profiling",
            "overview",
            "large",
            "design",
            "cycle"
        ],
        "courseDesc": "\"Software system decomposition and design. Overview of the software development life-cycle. Command languages. Version control and configuration management, programming for reliability. Testing and debugging techniques. Profiling and code improvement techniques. Practical work involving programming-in-the-large.     \"",
        "similarCourses": [
            "COMP9021",
            "COMP1917",
            "COMP1531",
            "COMP1911",
            "COMP4181",
            "COMP9181",
            "COMP4920",
            "COMP3153",
            "COMP3900",
            "COMP9900",
            "COMP9153",
            "COMP3141",
            "COMP3311",
            "COMP9116",
            "COMP9102"
        ],
        "courseUrl": "https://www.handbook.unsw.edu.au/undergraduate/courses/2019/COMP2041"
    },
    "COMP2111": {
        "courseCode": "COMP2111",
        "skills": [
            "especially set theory",
            "critical industrial contexts",
            "modelling system behaviour",
            "use case",
            "predicate logic",
            "methods support",
            "methods developed",
            "formal methods",
            "formal development",
            "develop competence",
            "concrete implementations",
            "abstract specifications",
            "proof obligations",
            "modelling",
            "proof",
            "verified",
            "specification",
            "safety",
            "refinement",
            "implementation",
            "consistency",
            "builds"
        ],
        "courseDesc": "\"This course introduces rigorous and formal methods for modelling system behaviour. These methods support the modelling of abstract specifications and the refinement of abstract specifications through to concrete implementations. Consistency of formal development is verified by proof obligations and formal proof. The course will cover: specification, refinement, implementation, proof obligations, and proof. It re-inforces, and builds on, prerequisite knowledge from MATH1081, especially set theory and predicate logic. The course will use case-studies and assignments to develop competence. The methods developed in this course are used in the SENG2011 workshops and in safety-critical industrial contexts.     \"",
        "similarCourses": [
            "COMP9116",
            "COMP4161",
            "COMP3141",
            "COMP3153",
            "COMP9153",
            "COMP2911",
            "COMP9322",
            "COMP1531",
            "COMP4141",
            "COMP4001",
            "COMP9211",
            "COMP6752",
            "COMP9152",
            "COMP3152",
            "COMP9315"
        ],
        "courseUrl": "https://www.handbook.unsw.edu.au/undergraduate/courses/2019/COMP2111"
    },
    "COMP2121": {
        "courseCode": "COMP2121",
        "skills": [
            "low level device drivers",
            "floating point number representation",
            "digital signals data acquisition",
            "assembly language programming methodology",
            "machine language programming",
            "machine language fundamentals",
            "converting analog signals",
            "instruction repertoire",
            "analog input",
            "serial communication",
            "memory system",
            "driving actuators",
            "computer arithmetic",
            "addressing modes",
            "assembly",
            "variety",
            "timers",
            "sensors",
            "interrupts",
            "buses"
        ],
        "courseDesc": "\"Instruction Set Architecture  ISA, Floating point number representation, computer arithmetic, assembly and machine language programming, machine language fundamentals; addressing modes; instruction repertoire, assembly language programming methodology, interrupts and I/O interfacing  hardware and software, serial communication, timers, analog input and output, converting analog signals to digital signals  data acquisition, taking input from a variety of sensors and driving actuators, buses and memory system, low level device drivers.     \"",
        "similarCourses": [
            "COMP9032",
            "COMP9414",
            "COMP3411",
            "COMP9242",
            "COMP6733",
            "COMP1917",
            "COMP9211",
            "COMP9116",
            "COMP1521",
            "COMP3211",
            "COMP1911",
            "COMP9243",
            "COMP1531",
            "COMP9018",
            "COMP9444"
        ],
        "courseUrl": "https://www.handbook.unsw.edu.au/undergraduate/courses/2019/COMP2121"
    },
    "COMP2511": {
        "courseCode": "COMP2511",
        "skills": [
            "design skills problem solving",
            "real world problems",
            "year cs courses",
            "oriented paradigm topics",
            "oriented design object",
            "oriented design",
            "second year",
            "oriented programming",
            "design project",
            "design patterns",
            "wide range",
            "sound programming",
            "practical work",
            "knowledge gained",
            "introduce students",
            "implementation project",
            "fundamental techniques",
            "expose students",
            "economics using",
            "data structures",
            "design",
            "science",
            "objects",
            "modeling",
            "engineering",
            "application"
        ],
        "courseDesc": "\"This course aims to introduce students to the principles of object-oriented design and to fundamental techniques in object-oriented programming. It is typically taken in the second year of study, after COMP2521, to ensure an appropriate background in data structures. The knowledge gained in COMP2511 is useful in a wide range of later-year CS courses.   The goal of the course is to expose students to:     the fundamental principles of object-oriented design   object-oriented programming and object-oriented design in Java   the application of sound programming and design skills   problem solving and modeling of real world problems from science, engineering, and economics using the object-oriented paradigm     Topics: Objects. Object-oriented design. Design patterns. Design by contract. Object-oriented programming in Java. Practical work: labs, design project, implementation project.     \"",
        "similarCourses": [
            "COMP4001",
            "COMP2521",
            "COMP9315",
            "COMP1531",
            "COMP4511",
            "COMP3311",
            "COMP1511",
            "COMP1917",
            "COMP6324",
            "COMP3171",
            "COMP6771",
            "COMP9171",
            "COMP9322",
            "COMP1911",
            "COMP4128"
        ],
        "courseUrl": "https://www.handbook.unsw.edu.au/undergraduate/courses/2019/COMP2511"
    },
    "COMP2521": {
        "courseCode": "COMP2521",
        "skills": [
            "fundamental data types",
            "core data structures",
            "data structures",
            "unix tools",
            "software systems",
            "second year",
            "programming assignments",
            "core algorithms",
            "algorithmic strategies",
            "algorithm analysis",
            "analysis",
            "algorithms",
            "understanding",
            "trees",
            "structure",
            "sorting",
            "searching",
            "measurement",
            "graphs",
            "design",
            "context",
            "anticipate"
        ],
        "courseDesc": "\"The goal of this course is to deepen students' understanding of data structures and algorithms and how these can be employed effectively in the design of software systems. We anticipate that it will generally be taken in the second year of a program, but since its only pre-requisite is COMP1511, is it possible to take it in first year. It is an important course in covering a range of core data structures and algorithms that will be used in context in later courses.   Topics: An introduction the structure, analysis and usage of a range of fundamental data types and the core algorithms that operate on them, including: algorithm analysis, sorting, searching, trees, graphs, files, algorithmic strategies, analysis and measurement of programs. Labs and programming assignments in C, using a range of Unix tools.     \"",
        "similarCourses": [
            "COMP1511",
            "COMP6721",
            "COMP2511",
            "COMP1521",
            "COMP1531",
            "COMP6741",
            "COMP9021",
            "COMP1927",
            "COMP9024",
            "COMP3121",
            "COMP3141",
            "COMP3153",
            "COMP9322",
            "COMP9153",
            "COMP4128"
        ],
        "courseUrl": "https://www.handbook.unsw.edu.au/undergraduate/courses/2019/COMP2521"
    },
    "COMP2911": {
        "courseCode": "COMP2911",
        "skills": [
            "problem solving design methodologies",
            "engineering design",
            "practical assignments",
            "object orientation",
            "greedy method",
            "formal examination",
            "dynamic methods",
            "complex systems",
            "design",
            "reliable",
            "divide",
            "conquer",
            "backtrack"
        ],
        "courseDesc": "\"The engineering design and use of reliable and complex systems. Object orientation and design. Problem solving design methodologies: backtrack, greedy method, divide and conquer, dynamic methods. Practical assignments, laboratory exercises, formal examination.     \"",
        "similarCourses": [
            "COMP9116",
            "COMP4128",
            "COMP1927",
            "COMP1917",
            "COMP3222",
            "COMP9222",
            "COMP2111",
            "COMP9101",
            "COMP1400",
            "COMP2511",
            "COMP9323",
            "COMP1911",
            "COMP1531",
            "COMP9322",
            "COMP4001"
        ],
        "courseUrl": "https://www.handbook.unsw.edu.au/undergraduate/courses/2019/COMP2911"
    },
    "COMP3121": {
        "courseCode": "COMP3121",
        "skills": [
            "designing algorithms using induction",
            "approximation algorithms",
            "space bounds",
            "space analysis",
            "order statistics",
            "greedy strategies",
            "computational complexity",
            "case time",
            "algorithms",
            "trees",
            "sorting",
            "matrices",
            "intractability",
            "graphs",
            "efficiency",
            "divide",
            "correctness",
            "conquer",
            "completeness"
        ],
        "courseDesc": "\"Correctness and efficiency of algorithms. Computational complexity: time and space bounds. Techniques for best-case, worst-case and average-case time and space analysis. Designing algorithms using induction, divide-and-conquer and greedy strategies. Algorithms: sorting and order statistics, trees, graphs, matrices. Intractability: classes P, NP, and NP-completeness, approximation algorithms.     \"",
        "similarCourses": [
            "COMP9101",
            "COMP4128",
            "COMP4141",
            "COMP2521",
            "COMP6741",
            "COMP4121",
            "COMP9024",
            "COMP1927",
            "COMP4129",
            "COMP6752",
            "COMP9152",
            "COMP3152",
            "COMP9020",
            "COMP3171",
            "COMP6771"
        ],
        "courseUrl": "https://www.handbook.unsw.edu.au/undergraduate/courses/2019/COMP3121"
    },
    "COMP3131": {
        "courseCode": "COMP3131",
        "skills": [
            "modern programing language",
            "small programming language",
            "free parsing techniques",
            "compiler front ends",
            "programming languages",
            "type checking",
            "regular expressions",
            "implementation techniques",
            "formal translation",
            "directed translation",
            "compilers emphasis",
            "code generation",
            "attribute grammars",
            "program syntax",
            "compiler",
            "syntax",
            "implementation",
            "semantics",
            "finite",
            "context"
        ],
        "courseDesc": "\"Covers the fundamental principles in programming languages and implementation techniques for compilers  emphasis on compiler front ends. Course contents include: program syntax and semantics, formal translation of programming languages, finite-state recognisers and regular expressions, context-free parsing techniques such as LL k  and LR k, attribute grammars, syntax-directed translation, type checking and code generation. Lab: implementation of a compiler in a modern programing language for a small programming language.     \"",
        "similarCourses": [
            "COMP9102",
            "COMP9161",
            "COMP4141",
            "COMP1917",
            "COMP9021",
            "COMP4181",
            "COMP9181",
            "COMP1911",
            "COMP3411",
            "COMP9116",
            "COMP2041",
            "COMP9311",
            "COMP3311",
            "COMP6741",
            "COMP6752"
        ],
        "courseUrl": "https://www.handbook.unsw.edu.au/undergraduate/courses/2019/COMP3131"
    },
    "COMP3141": {
        "courseCode": "COMP3141",
        "skills": [
            "presented using case studies",
            "software system development",
            "software tools",
            "implementation phases",
            "formal methods",
            "testing",
            "designs",
            "design"
        ],
        "courseDesc": "\"This course will present rigorous and formal methods for the design and implementation phases of software system development. Also considered are testing and reuse of designs. As far as possible, software tools that can assist the process will be used. The material will be presented using case studies, and students will be required to undertake a project.     \"",
        "similarCourses": [
            "COMP4001",
            "COMP9153",
            "COMP3153",
            "COMP2521",
            "COMP2111",
            "COMP6721",
            "COMP3601",
            "COMP4930",
            "COMP4931",
            "COMP6447",
            "COMP9116",
            "COMP3900",
            "COMP9900",
            "COMP1531",
            "COMP6843"
        ],
        "courseUrl": "https://www.handbook.unsw.edu.au/undergraduate/courses/2019/COMP3141"
    },
    "COMP3151": {
        "courseCode": "COMP3151",
        "skills": [
            "true concurrency vs interleaving",
            "termination detection",
            "practical work",
            "mutual exclusion",
            "gravitational n",
            "dining philosophers",
            "communication",
            "classical problems",
            "body problem",
            "concurrency",
            "threads",
            "semaphores",
            "rendezvous",
            "processes",
            "monitors",
            "models",
            "locks",
            "barriers",
            "abstractions"
        ],
        "courseDesc": "\"Concurrency = processes + communication. Communication via shared variables vs message passing. Models of concurrency: true concurrency vs interleaving. Abstractions: atomicity, locks and barriers, semaphores, monitors, threads, RPC, rendezvous. Classical problems: mutual exclusion, dining philosophers, sleeping barber, termination detection, gravitational N-body problem.Practical work: programming assignments using the C-like language MDP.     \"",
        "similarCourses": [
            "COMP6752",
            "COMP9152",
            "COMP3152",
            "COMP1911",
            "COMP9243",
            "COMP9336",
            "COMP3231",
            "COMP2121",
            "COMP9032",
            "COMP9201",
            "COMP9024",
            "COMP1917",
            "COMP9517",
            "COMP4141",
            "COMP9418"
        ],
        "courseUrl": "https://www.handbook.unsw.edu.au/undergraduate/courses/2019/COMP3151"
    },
    "COMP3152": {
        "courseCode": "COMP3152",
        "skills": [
            "distributed systems e",
            "design decisions underlying",
            "modelling concurrent systems",
            "concurrent systems",
            "true concurrency",
            "temporal logic",
            "system behaviour",
            "semantic equivalences",
            "process algebra",
            "implementation relations",
            "event structures",
            "equivalence checking",
            "concurrency found",
            "computational perspectives",
            "art techniques",
            "successful models",
            "semantic models",
            "mathematical models",
            "design",
            "concurrent",
            "models",
            "mathematical",
            "state",
            "philosophical",
            "operational",
            "modal",
            "literature",
            "component",
            "complexity",
            "comparing",
            "algorithms"
        ],
        "courseDesc": "\"This course tries to make students familiar with state-of-the-art techniques in modelling concurrent systems. This is done by comparing some of the more successful models of concurrency found in the literature. The focus will be on the rationale behind the design decisions underlying those models, viewed from philosophical, mathematical and computational perspectives. The course contains important background knowledge for students aiming at a scientific career in which the design of mathematical models of system behaviour is a component.Topics chosen from: semantic models of concurrent and distributed systems  e.g. process algebra, event structures, Petri nets, Chu spaces, operational and denotational semantics, semantic equivalences and implementation relations, linear versus branching time, interleaving versus partial order semantics, true concurrency, algorithms for equivalence checking and their complexity, modal and temporal logic for concurrent systems.     \"",
        "similarCourses": [
            "COMP6752",
            "COMP9152",
            "COMP3151",
            "COMP9322",
            "COMP4001",
            "COMP9418",
            "COMP9243",
            "COMP9313",
            "COMP9314",
            "COMP9511",
            "COMP3511",
            "COMP3222",
            "COMP9222",
            "COMP3121",
            "COMP4511"
        ],
        "courseUrl": "https://www.handbook.unsw.edu.au/undergraduate/courses/2019/COMP3152"
    },
    "COMP3153": {
        "courseCode": "COMP3153",
        "skills": [
            "describe several automatic verification techniques",
            "typically called algorithmic verification",
            "standard software engineering practice",
            "good software design alone",
            "fully automatic techniques",
            "mathematically sound techniques",
            "formal methods community",
            "automatic analysis",
            "several tools",
            "systematic testing",
            "code review",
            "tools",
            "systems",
            "system",
            "correctness",
            "application"
        ],
        "courseDesc": "\"It is virtually impossible to guarantee the correctness of a system, and in turn the absense of bugs by standard software engineering practice such as code review, systematic testing and good software design alone. The formal methods community has developed various rigorous, mathematically sound techniques and tools that allow the automatic analysis of systems and software. The application of these fully automatic techniques is typically called algorithmic verification.The course will describe several automatic verification techniques, the algoriths they are based on, and the tools that support them. We will discuss examples to which the techniques have been applied, and provide experience with the use of several tools.     \"",
        "similarCourses": [
            "COMP9153",
            "COMP6721",
            "COMP3141",
            "COMP2521",
            "COMP9334",
            "COMP9116",
            "COMP1531",
            "COMP9211",
            "COMP3211",
            "COMP2111",
            "COMP9322",
            "COMP4181",
            "COMP9181",
            "COMP1010",
            "COMP6442"
        ],
        "courseUrl": "https://www.handbook.unsw.edu.au/undergraduate/courses/2019/COMP3153"
    },
    "COMP3171": {
        "courseCode": "COMP3171",
        "skills": [
            "standard template library e",
            "run time type information",
            "oriented inheritance techniques",
            "oriented programming",
            "advanced techniques",
            "generic programming",
            "exception handling",
            "efficiency issues",
            "templates",
            "memory",
            "functions",
            "containers"
        ],
        "courseDesc": "\"This course introduces the fundamentals and advanced techniques of object-oriented programming in C++.Object-oriented inheritance techniques. Advanced techniques with functions. Memory and resource managment. Namespaces. Run time type information. Templates and generic programming. C++ Template metaprogramming. The Standard Template Library  e.g., algorithms, containers and iterators. Input/Output wth C++ iostreams library. Exception handling. C++ and Efficiency issues. Effective C++ design guidelines.     \"",
        "similarCourses": [
            "COMP6771",
            "COMP9171",
            "COMP2511",
            "COMP3121",
            "COMP4001",
            "COMP4128",
            "COMP4129",
            "COMP9315",
            "COMP1521",
            "COMP4121",
            "COMP9102",
            "COMP3153",
            "COMP6448",
            "COMP3131",
            "COMP9153"
        ],
        "courseUrl": "https://www.handbook.unsw.edu.au/undergraduate/courses/2019/COMP3171"
    },
    "COMP3211": {
        "courseCode": "COMP3211",
        "skills": [
            "sequential logic design principles",
            "simulate digital systems",
            "system level interconnect",
            "risc system",
            "modern processors",
            "memory subsystem",
            "architectural designs",
            "cad tools",
            "design",
            "tools",
            "verification",
            "simulation",
            "architecture"
        ],
        "courseDesc": "\"Study the architecture & organisation of modern processors, and influences upon these, with emphasis on pipelined RISC machines; gain understanding of the design of the memory subsystem, I/O, and system level interconnect; become proficient in the use of tools such as VHDL and SimpleScalar for the description, simulation, and verification of architectural designs; complete a series of assignments leading to the design, implemention, validatation and assessment of a RISC system. It is assumed students are familiar with combinational and sequential logic design principles and have some experience in the use of CAD tools to describe and simulate digital systems.     \"",
        "similarCourses": [
            "COMP9211",
            "CourseCode",
            "COMP3222",
            "COMP9222",
            "COMP9242",
            "COMP1531",
            "COMP9116",
            "COMP9322",
            "COMP9018",
            "COMP3153",
            "COMP9311",
            "COMP9243",
            "COMP9153",
            "COMP3141",
            "COMP9024"
        ],
        "courseUrl": "https://www.handbook.unsw.edu.au/undergraduate/courses/2019/COMP3211"
    },
    "COMP3222": {
        "courseCode": "COMP3222",
        "skills": [
            "art computer aided design tools",
            "digital systems computer systems",
            "design complex systems",
            "develop circuit solutions",
            "basic building blocks",
            "computer systems",
            "digital circuits",
            "sequential circuits",
            "problem solving",
            "hardware models",
            "describe circuits",
            "design",
            "digital",
            "state",
            "operation"
        ],
        "courseDesc": "\"This course aims to provide students with a knowledge of problem solving with digital systems  computer systems and digital circuits. The basic building blocks of combinational and sequential circuits are introduced to develop circuit solutions to problems and to understand and implement the design and operation of hardware models of digital and computer systems. HDLs will be used to describe circuits and state of the art computer aided design tools will be used to design complex systems.     \"",
        "similarCourses": [
            "COMP9222",
            "COMP9211",
            "COMP3211",
            "COMP4128",
            "COMP9101",
            "COMP9414",
            "COMP1010",
            "COMP6442",
            "COMP2911",
            "COMP9322",
            "COMP4511",
            "COMP3141",
            "COMP6441",
            "COMP4001",
            "COMP2511"
        ],
        "courseUrl": "https://www.handbook.unsw.edu.au/undergraduate/courses/2019/COMP3222"
    },
    "COMP3231": {
        "courseCode": "COMP3231",
        "skills": [
            "operating system organisation",
            "distributed operating systems",
            "file systems",
            "virtual memory",
            "storage management",
            "programming assignments",
            "process management",
            "memory management",
            "disk scheduling",
            "scheduling",
            "synchronisation",
            "services",
            "segmentation",
            "security",
            "protection",
            "paging",
            "communication"
        ],
        "courseDesc": "\"Operating System Organisation and services. Process management: scheduling, synchronisation and communication. Memory management: virtual memory, paging and segmentation. Storage management: disk scheduling, file systems. Protection and security. Distributed operating systems and file systems. Case studies: UNIX & NT. Lab: Programming assignments.Assumed Knowledge: C     \"",
        "similarCourses": [
            "COMP9201",
            "COMP9243",
            "COMP3891",
            "COMP3311",
            "COMP9315",
            "COMP9283",
            "COMP9242",
            "COMP1521",
            "COMP4920",
            "COMP6841",
            "COMP9161",
            "COMP9211",
            "COMP3411",
            "COMP9333",
            "COMP3211"
        ],
        "courseUrl": "https://www.handbook.unsw.edu.au/undergraduate/courses/2019/COMP3231"
    },
    "COMP3311": {
        "courseCode": "COMP3311",
        "skills": [
            "relational database management systems",
            "database application design",
            "database application",
            "storage management",
            "transaction processing",
            "query processing",
            "query languages",
            "development tools",
            "data models",
            "data definition",
            "relational",
            "design",
            "oriented",
            "implementation",
            "entity",
            "architecture"
        ],
        "courseDesc": "\"Data models: entity-relationship, relational, object-oriented. Relational database management systems: data definition, query languages, development tools. Database application design and implementation. Architecture of relational database management systems: storage management, query processing, transaction processing. Lab: design and implementation of a database application.     \"",
        "similarCourses": [
            "COMP9315",
            "COMP9311",
            "COMP3231",
            "COMP9201",
            "COMP9313",
            "COMP9314",
            "COMP2511",
            "COMP1531",
            "COMP4314",
            "COMP4920",
            "COMP9318",
            "COMP3411",
            "COMP4001",
            "COMP9418",
            "COMP9511"
        ],
        "courseUrl": "https://www.handbook.unsw.edu.au/undergraduate/courses/2019/COMP3311"
    },
    "COMP3331": {
        "courseCode": "COMP3331",
        "skills": [
            "file transfer protocol ftp",
            "substantial network programming component",
            "fundamental network security concepts",
            "address resolution using arp",
            "internet protocol suite overview",
            "network layer services",
            "congestion control mechanisms",
            "application level protocols",
            "networking technology overview",
            "transport protocols tcp",
            "finite state automata",
            "11 wireless networks",
            "data link",
            "protocol design",
            "link state",
            "network layers",
            "validation using",
            "transport layer",
            "connecting networks",
            "routing algorithms",
            "distance vector",
            "peer networks",
            "overview",
            "conjunction",
            "addressing"
        ],
        "courseDesc": "\"Networking technology overview. Protocol design and validation using the finite state automata in conjunction with time-lines. Overview of the IEEE802 network data link protocol standards. Addressing at the data link and network layers. Network layer services. Introduction to routing algorithms such as Distance Vector and Link State. Congestion control mechanisms. Internetworking issues in connecting networks. The Internet Protocol Suite overview. The Internet protocols IPv4 and IPv6. Address resolution using ARP and RARP. Transport layer: issues, transport protocols TCP and UDP. Application level protocols such as: File Transfer Protocol  FTP, Domain Name System  DNS  and Simple Mail Transfer Protocol  SMTP. Introduction to fundamental network security concepts, 802.11 wireless networks and peer to peer networks. There is a substantial network programming component in the assessable material.     \"",
        "similarCourses": [
            "COMP9331",
            "COMP4335",
            "COMP9335",
            "COMP9332",
            "COMP9333",
            "COMP4337",
            "COMP9337",
            "COMP9444",
            "COMP9336",
            "COMP6841",
            "COMP6441",
            "COMP9417",
            "COMP4336",
            "COMP6733",
            "COMP1521"
        ],
        "courseUrl": "https://www.handbook.unsw.edu.au/undergraduate/courses/2019/COMP3331"
    },
    "COMP3411": {
        "courseCode": "COMP3411",
        "skills": [
            "natural language processing",
            "logic programming assignments",
            "ai programming languages",
            "speech recognition",
            "search strategies",
            "pattern matching",
            "machine learning",
            "machine intelligence",
            "knowledge representation",
            "game playing",
            "expert systems",
            "control methods",
            "automated reasoning",
            "computer vision",
            "computer",
            "tools",
            "philosophical",
            "applications"
        ],
        "courseDesc": "\"Machine intelligence. Principles: knowledge representation, automated reasoning, machine learning. Tools: AI programming languages, control methods, search strategies, pattern matching. Applications: computer vision, speech recognition, natural language processing, expert systems, game playing, computer-aided learning. Philosophical and psychological issues. Lab: logic programming assignments.     \"",
        "similarCourses": [
            "COMP9414",
            "COMP4418",
            "COMP9417",
            "COMP9319",
            "COMP4432",
            "COMP9517",
            "COMP9511",
            "COMP3511",
            "COMP9418",
            "COMP1917",
            "COMP2121",
            "COMP9032",
            "COMP3311",
            "COMP1521",
            "COMP4161"
        ],
        "courseUrl": "https://www.handbook.unsw.edu.au/undergraduate/courses/2019/COMP3411"
    },
    "COMP3421": {
        "courseCode": "COMP3421",
        "skills": [
            "hidden surface removal",
            "user interfaces",
            "texture maps",
            "scan conversion",
            "programming assignments",
            "perspective transformation",
            "modelling curves",
            "hierarchical modelling",
            "graphics standards",
            "graphics hardware",
            "3d transformations",
            "2d transformations",
            "3d clipping",
            "clipping",
            "surfaces",
            "splines",
            "polygons",
            "objects",
            "lighting",
            "fractals"
        ],
        "courseDesc": "\"Graphics hardware: scan conversion of lines and polygons. 2D transformations: windowing, clipping, viewports. User interfaces. 3D transformations: perspective transformation, 3D clipping, hidden surface removal, lighting and texture maps. Hierarchical modelling of objects, modelling curves and surfaces with splines and fractals. Graphics standards. Lab: programming assignments.     \"",
        "similarCourses": [
            "COMP9415",
            "COMP9018",
            "COMP9021",
            "COMP9322",
            "COMP3411",
            "COMP9517",
            "COMP9201",
            "COMP1927",
            "COMP9311",
            "COMP1400",
            "COMP1917",
            "COMP9511",
            "COMP3231",
            "COMP3511",
            "COMP2111"
        ],
        "courseUrl": "https://www.handbook.unsw.edu.au/undergraduate/courses/2019/COMP3421"
    },
    "COMP3431": {
        "courseCode": "COMP3431",
        "skills": [
            "research agent architectures including classical planning",
            "picking actions using planning",
            "real agent architecture",
            "intelligent agent design",
            "working system",
            "theoretical components",
            "theoretical component",
            "implement parts",
            "engineered control",
            "reinforcement learning",
            "variety",
            "robot",
            "engineering"
        ],
        "courseDesc": "\"An introduction to Intelligent agent design. Picking actions using planning, learning or engineered control. Both practical and theoretical components. Practical component: Re-implement parts of a real agent architecture on a robot. Assignment based. Emphasis on engineering a working system. Theoretical component: Introduction to a variety of research agent architectures including classical planning and reinforcement learning. Lecture and lab based.     \"",
        "similarCourses": [
            "COMP4411",
            "COMP9417",
            "COMP9161",
            "COMP9333",
            "COMP9323",
            "COMP3411",
            "COMP4920",
            "COMP1521",
            "COMP9511",
            "COMP3511",
            "COMP9311",
            "COMP6841",
            "COMP9418",
            "COMP1511",
            "COMP6441"
        ],
        "courseUrl": "https://www.handbook.unsw.edu.au/undergraduate/courses/2019/COMP3431"
    },
    "COMP3441": {
        "courseCode": "COMP3441",
        "skills": [
            "public cryptographic protocols",
            "case studies drawn",
            "engineering secure systems",
            "applied computer security",
            "computer security",
            "social engineering",
            "security fails",
            "security analysis",
            "physical security",
            "intrusion detection",
            "digital forensics",
            "security",
            "honeypots",
            "hacking",
            "firewalls",
            "design",
            "cybercrime"
        ],
        "courseDesc": "\"Introduction to computer security, cybercrime, and cyberterror. The principles of engineering secure systems.Engineering secure systems. How security fails. Security analysis and design. Private and public cryptographic protocols. Physical security, social engineering, sniffing, intrusion detection, prevention and response, firewalls, honeypots. Digital forensics. Case studies drawn from the history of hacking and from current events.Additional topics drawn from recent developments and current research in applied computer security.No computing pre-requisites assumed, student need a keen devious and analytical mind.Students with a strong interest in security should also consider taking the complementary security courses COMP4442, COMP9447, TELE3119.     \"",
        "similarCourses": [
            "COMP9441",
            "COMP6441",
            "COMP6841",
            "COMP9447",
            "COMP4337",
            "COMP9337",
            "COMP6443",
            "COMP6449",
            "COMP6447",
            "COMP6843",
            "COMP9201",
            "COMP1511",
            "COMP4181",
            "COMP9181",
            "COMP3222"
        ],
        "courseUrl": "https://www.handbook.unsw.edu.au/undergraduate/courses/2019/COMP3441"
    },
    "COMP3511": {
        "courseCode": "COMP3511",
        "skills": [
            "human information processing system",
            "system interactions",
            "computer technologies",
            "models",
            "design",
            "analysis"
        ],
        "courseDesc": "\"Provides an introduction to user-system interactions, both analysis and design. The approach is cognitive, focusing on matching user goals with computer technologies. Topics: the human information processing system, models of interaction, strategies for and process of design and evaluation. Project work is emphasised.     \"",
        "similarCourses": [
            "COMP9511",
            "COMP3900",
            "COMP9900",
            "COMP4511",
            "COMP3411",
            "COMP9021",
            "COMP1531",
            "COMP4920",
            "COMP9418",
            "COMP6752",
            "COMP9152",
            "COMP3152",
            "COMP2521",
            "COMP4129",
            "COMP3311"
        ],
        "courseUrl": "https://www.handbook.unsw.edu.au/undergraduate/courses/2019/COMP3511"
    },
    "COMP3601": {
        "courseCode": "COMP3601",
        "skills": [
            "embedded system design life cycle",
            "embedded system design team projects",
            "software development techniques",
            "project report writing",
            "system testing",
            "software integration",
            "ip reuse",
            "ip protection",
            "design"
        ],
        "courseDesc": "\"Embedded system design team projects. Embedded system design life cycle. Software/hardware codesign. Hardware slection process. Software development techniques. Hardware/software integration and system testing. Ethics in teams, ethics in design, IP protection, IP reuse, project report writing. Project and team managment.     \"",
        "similarCourses": [
            "COMP3900",
            "COMP9900",
            "COMP9332",
            "COMP4920",
            "COMP3141",
            "COMP4001",
            "COMP1531",
            "COMP4129",
            "COMP9511",
            "COMP3511",
            "COMP2041",
            "COMP1921",
            "COMP3901",
            "COMP3902",
            "COMP6449"
        ],
        "courseUrl": "https://www.handbook.unsw.edu.au/undergraduate/courses/2019/COMP3601"
    },
    "COMP3821": {
        "courseCode": "COMP3821",
        "skills": [],
        "courseDesc": "\"As for COMP3121 but in greater depth.     \"",
        "similarCourses": [
            "COMP9801",
            "COMP9814",
            "COMP9844",
            "COMP9283",
            "COMP3891",
            "COMP6441",
            "COMP1521",
            "COMP9116",
            "COMP6443",
            "COMP2521",
            "COMP6841",
            "COMP6445",
            "COMP6843",
            "COMP6845",
            "COMP1531"
        ],
        "courseUrl": "https://www.handbook.unsw.edu.au/undergraduate/courses/2019/COMP3821"
    },
    "COMP3891": {
        "courseCode": "COMP3891",
        "skills": [],
        "courseDesc": "\"As for COMP3231 Operating Systems but in greater depth and breadth.Assumed Knowledge: C     \"",
        "similarCourses": [
            "COMP9283",
            "COMP9801",
            "COMP9814",
            "COMP9844",
            "COMP3821",
            "COMP3231",
            "COMP9201",
            "COMP1521",
            "COMP6714",
            "COMP9332",
            "COMP4418",
            "COMP2521",
            "COMP6841",
            "COMP9243",
            "COMP9242"
        ],
        "courseUrl": "https://www.handbook.unsw.edu.au/undergraduate/courses/2019/COMP3891"
    },
    "COMP3900": {
        "courseCode": "COMP3900",
        "skills": [
            "software project management",
            "capstone software project",
            "world software system",
            "software system",
            "teamwork strategies"
        ],
        "courseDesc": "\"A capstone software project. Students work in teams to define, implement and evaluate a real-world software system. Most of the work in this course is team-based project work, although there are some introductory lectures on software project management and teamwork strategies. Project teams meet fortnightly with project mentors to report on the progress of the project. Assessment is based on a project proposal, a final project demonstration and report, and on the quality of the software system itself. Students are also required to reflect on their work and to provide peer assessment of their team-mates' contributions to the project.     \"",
        "similarCourses": [
            "COMP9900",
            "COMP3901",
            "COMP1531",
            "COMP3902",
            "COMP4920",
            "COMP3601",
            "COMP4930",
            "COMP4931",
            "COMP9511",
            "COMP3511",
            "COMP9333",
            "COMP6843",
            "COMP9323",
            "COMP9945",
            "COMP9596"
        ],
        "courseUrl": "https://www.handbook.unsw.edu.au/undergraduate/courses/2019/COMP3900"
    },
    "COMP3901": {
        "courseCode": "COMP3901",
        "skills": [],
        "courseDesc": "\"The student will complete a small research project under the supervision of a member of the academic staff of the School. The project will be assessed on the basis of a report written by the student.     \"",
        "similarCourses": [
            "COMP3902",
            "COMP3900",
            "COMP9900",
            "COMP4930",
            "COMP4931",
            "COMP4910",
            "COMP4911",
            "COMP9945",
            "COMP9596",
            "COMP4920",
            "COMP3601",
            "COMP9116",
            "COMP1531",
            "COMP4335",
            "COMP9335"
        ],
        "courseUrl": "https://www.handbook.unsw.edu.au/undergraduate/courses/2019/COMP3901"
    },
    "COMP3902": {
        "courseCode": "COMP3902",
        "skills": [],
        "courseDesc": "\"The student will complete a medium-sized research project under the supervision of a member of the academic staff of the School. The project will be assessed on the basis of report written by the student.     \"",
        "similarCourses": [
            "COMP3901",
            "COMP3900",
            "COMP9900",
            "COMP4930",
            "COMP4931",
            "COMP4910",
            "COMP4911",
            "COMP9945",
            "COMP9596",
            "COMP4920",
            "COMP3601",
            "COMP1531",
            "COMP4335",
            "COMP9335",
            "COMP9116"
        ],
        "courseUrl": "https://www.handbook.unsw.edu.au/undergraduate/courses/2019/COMP3902"
    },
    "COMP4001": {
        "courseCode": "COMP4001",
        "skills": [
            "complex software systems",
            "oriented design",
            "design patterns",
            "wide range",
            "software reuse",
            "implementation methods",
            "illustrate concepts",
            "concurrent programming"
        ],
        "courseDesc": "\"This course will cover object-oriented design and implementation methods for complex software systems. Topics covered include: object-oriented program design techniques, concurrent programming in Java, software reuse and designing for reuse, design patterns and styles, some more advanced OO topics. Examples from a wide range of application areas will be used at all stages to illustrate concepts and techniques.Assumed Knowledge: Competency in Java.     \"",
        "similarCourses": [
            "COMP2511",
            "COMP3141",
            "COMP9315",
            "COMP6752",
            "COMP9152",
            "COMP3152",
            "COMP2521",
            "COMP1917",
            "COMP9322",
            "COMP4511",
            "COMP3601",
            "COMP1911",
            "COMP4181",
            "COMP9181",
            "COMP3311"
        ],
        "courseUrl": "https://www.handbook.unsw.edu.au/undergraduate/courses/2019/COMP4001"
    },
    "COMP4121": {
        "courseCode": "COMP4121",
        "skills": [
            "problem solving practices",
            "dimensional data storage",
            "parallel algorithmic techniques",
            "neumann techniques",
            "linear equations",
            "iteration methods",
            "circuit implementations",
            "algorithm engineering",
            "approximation algorithms",
            "algorithms",
            "systems",
            "structured",
            "spatial",
            "solution",
            "matrices",
            "convolution",
            "advanced"
        ],
        "courseDesc": "\"Topics chosen from: Spatial, semi-structured and multi-dimensional data storage and manipulation techniques, non Von-Neumann techniques, advanced and parallel algorithmic techniques, algorithm engineering and problem solving practices; algorithms for matrices and systems of linear equations, approximation algorithms, FFT and convolution and their software and circuit implementations, iteration methods for the solution of operator equations.     \"",
        "similarCourses": [
            "COMP4128",
            "COMP3121",
            "COMP9101",
            "COMP9311",
            "COMP2521",
            "COMP1531",
            "COMP6741",
            "COMP3153",
            "COMP6752",
            "COMP9152",
            "COMP9417",
            "COMP9153",
            "COMP3152",
            "COMP2911",
            "COMP9242"
        ],
        "courseUrl": "https://www.handbook.unsw.edu.au/undergraduate/courses/2019/COMP4121"
    },
    "COMP4128": {
        "courseCode": "COMP4128",
        "skills": [
            "algorithms covered include dynamic programming",
            "select appropriate algorithms",
            "integrate multiple algorithms",
            "design new algorithms",
            "programming contests",
            "include evaluation",
            "combinatorial algorithms",
            "advanced algorithms",
            "time pressure",
            "suffix trees",
            "shortest path",
            "problem difficulty",
            "max flow",
            "solving problems",
            "solving",
            "implementation",
            "development"
        ],
        "courseDesc": "\"The focus of the course is the development and implementation of advanced algorithms. Students will learn to select appropriate algorithms for a given problem, integrate multiple algorithms for solving a complex problem, design new algorithms, and implement them. Algorithms covered include dynamic programming, shortest path, max flow, suffix trees, and combinatorial algorithms. They will also learn skills required for programming contests, which include evaluation of problem difficulty, solving problems in teams, and work under time pressure.     \"",
        "similarCourses": [
            "COMP4129",
            "COMP6741",
            "COMP3121",
            "COMP9101",
            "COMP4121",
            "COMP2911",
            "COMP2521",
            "COMP3222",
            "COMP9222",
            "COMP1010",
            "COMP6442",
            "COMP1921",
            "COMP2511",
            "COMP1927",
            "COMP6447"
        ],
        "courseUrl": "https://www.handbook.unsw.edu.au/undergraduate/courses/2019/COMP4128"
    },
    "COMP4129": {
        "courseCode": "COMP4129",
        "skills": [
            "advanced dynamic programming",
            "advanced algorithms",
            "time management",
            "team work",
            "maximum matching",
            "iterative deepening",
            "implementation",
            "development"
        ],
        "courseDesc": "\"This course builds on the activities from COMP4128 with the development and implementation of more advanced algorithms, such as maximum matching, A*, geometric algorithms, iterative deepening and advanced dynamic programming.They will also practice the skills required for programming contests -- evaluation of problems, team work and time management.       \"",
        "similarCourses": [
            "COMP4128",
            "COMP6741",
            "COMP3121",
            "COMP3601",
            "COMP9101",
            "COMP9511",
            "COMP4432",
            "COMP3511",
            "COMP4511",
            "COMP3141",
            "COMP4941",
            "COMP8552",
            "COMP8031",
            "COMP8032",
            "COMP8041"
        ],
        "courseUrl": "https://www.handbook.unsw.edu.au/undergraduate/courses/2019/COMP4129"
    },
    "COMP4141": {
        "courseCode": "COMP4141",
        "skills": [
            "turing machines tms",
            "universal tms",
            "turing thesis",
            "run time",
            "relative completeness",
            "regular expressions",
            "pumping lemma",
            "polynomial reductions",
            "loop invariants",
            "incompleteness result",
            "halting problem",
            "free grammars",
            "word problems",
            "optimisation problems",
            "formal languages",
            "program correctness",
            "np completeness",
            "finite automata",
            "complexity classes",
            "languages",
            "correctness",
            "complexity",
            "automata",
            "space",
            "semantics",
            "reduction",
            "randomisation",
            "proof",
            "loops",
            "determinism",
            "context",
            "assertions",
            "approximation"
        ],
        "courseDesc": "\"Computability: formal languages and problems, Turing Machines  TMs, computability,  semi- decidability, universal TMs, Church-Turing thesis, halting problem, reduction and undecidability proofs, examples; Complexity: run time, space, complexity classes, non-determinism and NP, polynomial reductions and NP completeness, optimisation problems and approximation, randomisation; Languages and Automata: regular expressions and languages, finite automata, determinisation, context-free grammars and languages  CFLs, Chomsky normal form, word problems, pumping lemma, push-down automata, decidability problems for CFLs; Semantics and Correctness: while programs, assertions and program correctness, Hoare logic, loops and loop invariants, relative completeness of Hoare logic  and its role in a proof of G&ouml;del's incompleteness result      \"",
        "similarCourses": [
            "COMP3121",
            "COMP9102",
            "COMP3131",
            "COMP9242",
            "COMP9311",
            "COMP9101",
            "COMP6741",
            "COMP9018",
            "COMP9161",
            "COMP9243",
            "COMP4161",
            "COMP9211",
            "COMP9024",
            "COMP3211",
            "COMP9322"
        ],
        "courseUrl": "https://www.handbook.unsw.edu.au/undergraduate/courses/2019/COMP4141"
    },
    "COMP4161": {
        "courseCode": "COMP4161",
        "skills": [
            "mechanical proof assistants",
            "current research topics",
            "higher order logic",
            "conduct formal proofs",
            "proof techniques used",
            "order logic",
            "theorem proving",
            "techniques involved",
            "theoretical background",
            "term rewriting",
            "recursive functions",
            "presents specification",
            "natural deduction",
            "mathematical proofs",
            "logical domains",
            "lambda calculus",
            "induction principles",
            "functional programming",
            "decision procedures",
            "data types",
            "automated deduction",
            "verification",
            "proofs",
            "variety",
            "practice",
            "modelling"
        ],
        "courseDesc": "\"This course is about mechanical proof assistants, how they work, and what they can be used for. It presents specification and proof techniques used in industrial grade theorem provers, teaches the theoretical background to the techniques involved, and shows how to use a theorem prover to conduct formal proofs in practice. The courses is intended to bring third/fourth year and postgraduate students into contact with the current research topics in the field of theorem proving and automated deduction and to teach them the necessary skills to successfully use industrial grade verification environments in modelling and verification.   Topics covered included: higher order logic, natural deduction, lambda calculus, term rewriting, data types and recursive functions, induction principles, calculational reasoning, mathematical proofs, decision procedures for a variety of logical domains, and proofs about programs.   Note: experience with  first-order  logic and functional programming is required.     \"",
        "similarCourses": [
            "COMP2111",
            "COMP9116",
            "COMP2521",
            "COMP4418",
            "COMP3411",
            "COMP9153",
            "COMP3153",
            "COMP6841",
            "COMP6843",
            "COMP4141",
            "COMP9211",
            "COMP9020",
            "COMP6441",
            "COMP3211",
            "COMP6447"
        ],
        "courseUrl": "https://www.handbook.unsw.edu.au/undergraduate/courses/2019/COMP4161"
    },
    "COMP4181": {
        "courseCode": "COMP4181",
        "skills": [
            "based test generators",
            "including security infrastructure software",
            "amss transport systems",
            "modern functional languages",
            "achieve high assurance",
            "software systems",
            "safety",
            "security infrastructure",
            "specific languages",
            "systems",
            "power grids",
            "financial applications",
            "software used",
            "security",
            "assurance",
            "trust",
            "specification",
            "domain"
        ],
        "courseDesc": "\"Trust in the safety and security of software systems is increasingly important with the use of software in systems where failure or sabotage can lead to loss of life or be very expensive  this includes medical and financial applications as well as software used for power grids, amss transport systems, and security infrastructure. This course covers language based safety engineering techniques advanced type systems, specification-based test generators, domain-specific languages, and prototyping for high-assurance. It demonstrates via concrete examples, including security infrastructure software, how modern functional languages are used to achieve high assurance, and conveys hands-on experience via practical assignments.     \"",
        "similarCourses": [
            "COMP9181",
            "COMP6441",
            "COMP6841",
            "COMP8522",
            "COMP6447",
            "COMP1531",
            "COMP1010",
            "COMP6442",
            "COMP9153",
            "COMP3153",
            "COMP3441",
            "COMP3141",
            "COMP9441",
            "COMP2041",
            "COMP4001"
        ],
        "courseUrl": "https://www.handbook.unsw.edu.au/undergraduate/courses/2019/COMP4181"
    },
    "COMP4314": {
        "courseCode": "COMP4314",
        "skills": [
            "query processing optimisation techniques",
            "1 stream computation",
            "web application system",
            "3 web searching",
            "multimedia data",
            "data streams",
            "web technologies",
            "web searching",
            "web databases",
            "multimedia databases",
            "multimedia applications",
            "future trends",
            "detailed examination",
            "searching",
            "state",
            "database"
        ],
        "courseDesc": "\"Detailed examination of current developments and future trends in database, web technologies and multimedia applications. The emphasis will be on the following topics: data streams, web databases, web searching, multimedia databases.We will introduce stream data managment system and web application system, respectively, with the focus on query processing optimisation techniques. We will also introduce the state-of-art technology in web searching and multimedia databases. These include: 1  Stream Computation, 2  DB and IR, 3  Web Searching and XML technology, 4  Indexing and Searching for multimedia data.     \"",
        "similarCourses": [
            "COMP6714",
            "COMP9321",
            "COMP6443",
            "COMP9318",
            "COMP6843",
            "COMP9315",
            "COMP1400",
            "COMP9024",
            "COMP3311",
            "COMP9322",
            "COMP9311",
            "COMP1000",
            "COMP2521",
            "COMP9333",
            "COMP9323"
        ],
        "courseUrl": "https://www.handbook.unsw.edu.au/undergraduate/courses/2019/COMP4314"
    },
    "COMP4335": {
        "courseCode": "COMP4335",
        "skills": [
            "medium access control protocol",
            "routing protocol design",
            "minor design project",
            "deploying wireless mesh",
            "transport layer issues",
            "wireless mesh",
            "sensor networks",
            "important technologies",
            "leading industrial",
            "laboratory component",
            "important impact",
            "academic researchers",
            "significance",
            "security",
            "labelled",
            "application"
        ],
        "courseDesc": "\"Wireless mesh networks  WMNs  and wireless sensor networks  WSNs  are two emerging wireless technologies which will have important impact in the future. In fact, the significance of WSNs has led to it being labelled as one of the most important technologies in the 21st century.This course will cover the fundamental design principles behind building scalable WMNs and WSNs. The following aspects on wireless mesh and sensor networks will be covered: medium access control protocol, routing protocol design, transport layer issues, middleware, application and security. It will also cover case studies on deploying wireless mesh and sensor networks.This course includes a laboratory component and minor design project. It may also include guest lectures from leading industrial and academic researchers.     \"",
        "similarCourses": [
            "COMP9335",
            "COMP4337",
            "COMP9337",
            "COMP9331",
            "COMP3331",
            "COMP9336",
            "COMP9444",
            "COMP9332",
            "COMP4920",
            "COMP6733",
            "COMP4336",
            "COMP9333",
            "COMP3900",
            "COMP9900",
            "COMP9322"
        ],
        "courseUrl": "https://www.handbook.unsw.edu.au/undergraduate/courses/2019/COMP4335"
    },
    "COMP4336": {
        "courseCode": "COMP4336",
        "skills": [
            "learning emerging device functionalities",
            "mobility affects networks",
            "mobile device programming",
            "managing mobility",
            "ip networks",
            "mobile video",
            "mobile networking",
            "basic understanding",
            "achieving self",
            "systems",
            "realizing",
            "protocols",
            "enhancing",
            "applications"
        ],
        "courseDesc": "\"This course will examine how mobility affects networks, systems, and applications. It will teachadvanced concepts and protocols for managing mobility in TCP/IP networks, improving spectrum andenergy efficiency of mobile networking, realizing more direct form of device-to-devicecommunication, enhancing the quality of experience of mobile video, and achieving self-poweredwireless communication. Learning emerging device functionalities and features will be part of thiscourse, which requires some basic understanding of mobile device programming, such as Android andJava.     \"",
        "similarCourses": [
            "COMP9336",
            "COMP9332",
            "COMP9444",
            "COMP4337",
            "COMP9337",
            "COMP9417",
            "COMP4411",
            "COMP4335",
            "COMP9335",
            "COMP9331",
            "COMP3331",
            "COMP1521",
            "COMP9333",
            "COMP6841",
            "COMP9021"
        ],
        "courseUrl": "https://www.handbook.unsw.edu.au/undergraduate/courses/2019/COMP4336"
    },
    "COMP4337": {
        "courseCode": "COMP4337",
        "skills": [
            "secure routing protocols",
            "secure location discovery",
            "mac layer misbehaviours",
            "wireless technology emerges",
            "authentication servers radius",
            "building sensor networks",
            "wireless lan security",
            "traditional security attacks",
            "following key concepts",
            "wireless networks",
            "security vulnerabilities",
            "security becomes",
            "service attacks",
            "key management",
            "fundamental concepts",
            "broadcast authentication",
            "top priority",
            "securing ad",
            "laboratory component",
            "design project",
            "communications markets",
            "advanced issues",
            "solutions",
            "networking",
            "mainstream",
            "hands",
            "explore",
            "denial"
        ],
        "courseDesc": "\"As wireless technology emerges into the mainstream of the networking and communications markets, security becomes a top priority. This course will explore the security vulnerabilities in wireless networks and cover the fundamental concepts and advanced issues for building sensor networks. The following key concepts will be covered: Wireless LAN Security - Wired Equivalent Privacy  WEP, Wi-Fi Protected Access  WPA, Authentication Servers  RADIUS, 802.11i security standard; Securing Ad-Hoc Networks - MAC layer misbehaviours, secure routing protocols, denial of service attacks, key management, broadcast authentication, secure location discovery, non-traditional security attacks and solutions. This course includes a hands-on laboratory component and a design project.     \"",
        "similarCourses": [
            "COMP9337",
            "COMP4335",
            "COMP9335",
            "COMP6441",
            "COMP6841",
            "COMP6731",
            "COMP3441",
            "COMP9331",
            "COMP3331",
            "COMP9441",
            "COMP9447",
            "COMP9444",
            "COMP6443",
            "COMP9336",
            "COMP6733"
        ],
        "courseUrl": "https://www.handbook.unsw.edu.au/undergraduate/courses/2019/COMP4337"
    },
    "COMP4411": {
        "courseCode": "COMP4411",
        "skills": [
            "small mobile robot kit",
            "artificial intelligence concepts",
            "multiple robot systems",
            "robot vision",
            "robot planning",
            "robot learning",
            "vision processing",
            "topics covered",
            "robotic architectures",
            "obstacle avoidance",
            "localisation problem",
            "hardware components",
            "subsystems",
            "solutions",
            "sensors",
            "robotics",
            "philosophy",
            "perception",
            "navigation",
            "measurements",
            "hands",
            "experimental"
        ],
        "courseDesc": "\"Artificial Intelligence Concepts in Robotics. The approach is experimental, with hands-on experience with a small mobile robot kit. Topics covered will include a selection from: history and philosophy of robotics, hardware components and subsystems, sensors, measurements and perception, robotic architectures, multiple robot systems, localisation problem and solutions, robot learning, navigation and obstacle avoidance, robot planning, robot vision and vision processing.     \"",
        "similarCourses": [
            "COMP9414",
            "COMP3431",
            "COMP9517",
            "COMP3411",
            "COMP9417",
            "COMP9336",
            "COMP4128",
            "COMP4336",
            "COMP4418",
            "COMP6733",
            "COMP1917",
            "COMP9323",
            "COMP3222",
            "COMP9222",
            "COMP1911"
        ],
        "courseUrl": "https://www.handbook.unsw.edu.au/undergraduate/courses/2019/COMP4411"
    },
    "COMP4418": {
        "courseCode": "COMP4418",
        "skills": [
            "topics covered",
            "symbolic form",
            "solid background",
            "game theory",
            "artificial intelligence",
            "ai logics",
            "research issues",
            "important area",
            "knowledge representation",
            "reasoning",
            "research",
            "representation",
            "gives",
            "detail",
            "deepen",
            "constraints",
            "concerned"
        ],
        "courseDesc": "\"Knowledge Representation and Reasoning  KRR  is at the core of Artificial Intelligence. It is concerned with the representation of knowledge in symbolic form and the use of this knowledge for reasoning. This course presents current trends and research issues in Knowledge Representation and Reasoning  KRR. It enables students interested in Artificial Intelligence to deepen their knowledge in this important area and gives them a solid background for doing their own work/research in this area. The topics covered in more detail are AI Logics, Probablilistic Reasoning, Constraints, and Game Theory.     \"",
        "similarCourses": [
            "COMP3411",
            "COMP9414",
            "COMP4432",
            "COMP4161",
            "COMP2521",
            "COMP1917",
            "COMP1521",
            "COMP1911",
            "COMP9418",
            "COMP4411",
            "COMP4511",
            "COMP6448",
            "COMP6752",
            "COMP9152",
            "COMP3891"
        ],
        "courseUrl": "https://www.handbook.unsw.edu.au/undergraduate/courses/2019/COMP4418"
    },
    "COMP4431": {
        "courseCode": "COMP4431",
        "skills": [
            "iterative design process",
            "subject aims",
            "new game",
            "game fun",
            "game design",
            "game balanced",
            "computer science",
            "workshop games",
            "games industry",
            "digital media",
            "design",
            "games",
            "media",
            "story",
            "prototype",
            "programming",
            "invent",
            "graphics",
            "communications",
            "change"
        ],
        "courseDesc": "\"No change to existing descripton:Game design. How do I invent a new game? What makes a game fun? What is the role of story in games? What makes a game balanced?This subject aims to bring together students from Digital Media, Media and Communications and Computer Science to work in teams together to invent, prototype and workshop games. The focus is on the design of play, not on programming or graphics. An iterative design process is used, involving prototyping and playtesting. There will also be guest lectures from the games industry.     \"",
        "similarCourses": [
            "COMP4432",
            "COMP3411",
            "COMP3222",
            "COMP9222",
            "COMP4511",
            "COMP6447",
            "COMP4161",
            "COMP3900",
            "COMP9900",
            "COMP1010",
            "COMP6442",
            "COMP6441",
            "COMP2511",
            "COMP6841",
            "COMP9322"
        ],
        "courseUrl": "https://www.handbook.unsw.edu.au/undergraduate/courses/2019/COMP4431"
    },
    "COMP4432": {
        "courseCode": "COMP4432",
        "skills": [
            "iterative game design process taught",
            "game design studio provides",
            "game design skills",
            "weekly reading group",
            "students work individually",
            "game design",
            "game salad",
            "game maker",
            "appropriate game",
            "development tool",
            "design",
            "unity",
            "understanding",
            "theory",
            "prototype",
            "practice",
            "participating",
            "pairs",
            "games",
            "flash",
            "consolidate"
        ],
        "courseDesc": "\"Game Design Studio provides you with an opportunity to practice and consolidate your game design skills. The course builds on the iterative game design process taught in COMP4431 Game Design Workshop. Students work individually or in pairs to design, prototype and playtest their own games, while also expanding their understanding of the theory of game design by participating in a weekly reading group. This course assumes familiarity with an appropriate game-development tool such as Flash, Unity, Game Maker or Game Salad.     \"",
        "similarCourses": [
            "COMP4431",
            "COMP3411",
            "COMP4511",
            "COMP4418",
            "COMP1010",
            "COMP6442",
            "COMP4129",
            "COMP9511",
            "COMP3511",
            "COMP2511",
            "COMP6447",
            "COMP9447",
            "COMP4941",
            "COMP8552",
            "COMP8031"
        ],
        "courseUrl": "https://www.handbook.unsw.edu.au/undergraduate/courses/2019/COMP4432"
    },
    "COMP4511": {
        "courseCode": "COMP4511",
        "skills": [
            "human computer interaction",
            "graphical user interfaces",
            "date industry practice",
            "based course designed",
            "centred design process",
            "iterative process",
            "centred design",
            "solid understanding",
            "oriented techniques",
            "design practices",
            "design patterns",
            "complete prototypes",
            "knowledge required",
            "functioning application",
            "fidelity prototype",
            "industry",
            "design",
            "fidelity",
            "application",
            "testing",
            "iteration",
            "interface",
            "coding",
            "built",
            "build"
        ],
        "courseDesc": "\"This course is a project-based course designed to build on the basic skills acquired in COMP3511 &ndash; Human Computer Interaction. The course addresses the skills and knowledge required in industry to brainstorm, design, implement, and evaluate an application through the user-centred design process. Because this is an iterative process, students will be required to build their interface at least three times, starting with a low-fidelity prototype and building to high-fidelity and more complete prototypes. By the end of the course, students should have a solid understanding of the importance of user-centred design and how it is applied in the industry to design, test and build a functioning application.   The course is built to reflect up-to-date industry practice and methods. You would have benefitted from also completing COMP2911, which introduces you to object-oriented techniques, UML and design patterns. Whilst you will be coding in this course to build an iteration of your application, this is not the focus of the course, which remains on design practices and testing of graphical user interfaces.     \"",
        "similarCourses": [
            "COMP1010",
            "COMP6442",
            "COMP1531",
            "COMP2511",
            "COMP9511",
            "COMP3511",
            "COMP4432",
            "COMP1511",
            "COMP9322",
            "COMP6843",
            "COMP4001",
            "COMP6443",
            "COMP6447",
            "COMP9945",
            "COMP6841"
        ],
        "courseUrl": "https://www.handbook.unsw.edu.au/undergraduate/courses/2019/COMP4511"
    },
    "COMP4601": {
        "courseCode": "COMP4601",
        "skills": [
            "emphasises laboratory experience",
            "custom accelerator blocks",
            "cad challenges posed",
            "signal processing",
            "power consumption",
            "performance analysis",
            "core processors",
            "biological sequencing",
            "hardware design",
            "design validation",
            "design",
            "telecommunications",
            "programming",
            "cryptography"
        ],
        "courseDesc": "\"Hardware design and systems prototyping using field-programmable gate arrays. Emphasises laboratory experience in programming and interfacing with FPGAs. Acceleration of soft-core processors, design of custom accelerator blocks and configurable logic-based applications from areas such as telecommunications, signal processing, cryptography and biological sequencing. Techniques for designing and implementing configurable systems. CAD challenges posed by the area. Design validation, performance analysis and power consumption. Reconfigurable systems.     \"",
        "similarCourses": [
            "COMP9211",
            "COMP9334",
            "COMP3211",
            "COMP3222",
            "COMP9222",
            "COMP4181",
            "COMP9181",
            "COMP9242",
            "COMP4001",
            "COMP1917",
            "COMP3311",
            "COMP9511",
            "COMP3511",
            "COMP9021",
            "COMP2511"
        ],
        "courseUrl": "https://www.handbook.unsw.edu.au/undergraduate/courses/2019/COMP4601"
    },
    "COMP4904": {
        "courseCode": "COMP4904",
        "skills": [],
        "courseDesc": "\"Please Note: Co-op students are not liable for tuition fee charges for this course.   This is the first Industrial Training placement for Computer Science Co-op scholars. Students undertake a six month placement with a sponsor company. Students must provide a report on their experience at the end of the placement.     \"",
        "similarCourses": [
            "COMP4905",
            "COMP4906",
            "COMP6721",
            "COMP4930",
            "COMP4931",
            "COMP3900",
            "COMP9900",
            "COMP4941",
            "COMP8552",
            "COMP8031",
            "COMP8032",
            "COMP8041",
            "COMP8042",
            "COMP8033",
            "COMP1911"
        ],
        "courseUrl": "https://www.handbook.unsw.edu.au/undergraduate/courses/2019/COMP4904"
    },
    "COMP4905": {
        "courseCode": "COMP4905",
        "skills": [],
        "courseDesc": "\"Please Note: Co-op students are not liable for tuition fee charges for this course.   This is the second Industrial Training placement for Computer Science Co-op scholars. Students undertake a six month placement with a sponsor company. Students must provide a report on their experience at the end of the placement.     \"",
        "similarCourses": [
            "COMP4904",
            "COMP4906",
            "COMP4930",
            "COMP4931",
            "COMP3900",
            "COMP9900",
            "COMP4941",
            "COMP8552",
            "COMP8031",
            "COMP8032",
            "COMP8041",
            "COMP8042",
            "COMP8033",
            "COMP6721",
            "COMP4910"
        ],
        "courseUrl": "https://www.handbook.unsw.edu.au/undergraduate/courses/2019/COMP4905"
    },
    "COMP4906": {
        "courseCode": "COMP4906",
        "skills": [],
        "courseDesc": "\"Please Note: Co-op students are not liable for tuition fee charges for this course.   This is the third Industrial Training placement for Computer Science Co-op scholars. Students undertake a six month placement with a sponsor company. Students must provide a report on their experience at the end of the placement.     \"",
        "similarCourses": [
            "COMP4904",
            "COMP4905",
            "COMP4930",
            "COMP4931",
            "COMP3900",
            "COMP9900",
            "COMP4941",
            "COMP8552",
            "COMP8031",
            "COMP8032",
            "COMP8041",
            "COMP8042",
            "COMP8033",
            "COMP6721",
            "COMP1911"
        ],
        "courseUrl": "https://www.handbook.unsw.edu.au/undergraduate/courses/2019/COMP4906"
    },
    "COMP4910": {
        "courseCode": "COMP4910",
        "skills": [
            "appropriate testing",
            "design",
            "construction"
        ],
        "courseDesc": "\"Thesis part A and B are done in the last two semesters of the BE degree program. For full-time students, a nominal three hours per week in the first semester and fifteen hours per week in the second semester are devoted to directed laboratory and research work on an approved course under guidance of members of the academic staff. Usually, the Thesis involves the design and construction of experimental apparatus and/or software, together with appropriate testing and evaluation. For Part A, students are required to present a satisfactory seminar. For Part B, a written thesis must be submitted by the Tuesday of the final week of the semester.     \"",
        "similarCourses": [
            "COMP4911",
            "COMP4930",
            "COMP4931",
            "COMP4941",
            "COMP8552",
            "COMP8031",
            "COMP8032",
            "COMP8041",
            "COMP8042",
            "COMP8033",
            "COMP9447",
            "COMP3901",
            "COMP3902",
            "COMP9945",
            "COMP9596"
        ],
        "courseUrl": "https://www.handbook.unsw.edu.au/undergraduate/courses/2019/COMP4910"
    },
    "COMP4911": {
        "courseCode": "COMP4911",
        "skills": [
            "appropriate testing",
            "design",
            "construction"
        ],
        "courseDesc": "\"Thesis part A and B are done in the last two semesters of the BE degree program. For full-time students, a nominal three hours per week in the first semester and fifteen hours per week in the second semester are devoted to directed laboratory and research work on an approved course under guidance of members of the academic staff. Usually, the Thesis involves the design and construction of experimental apparatus and/or software, together with appropriate testing and evaluation. For Part A, students are required to present a satisfactory seminar. For Part B, a written thesis must be submitted by the Tuesday of the final week of the semester.     \"",
        "similarCourses": [
            "COMP4910",
            "COMP4930",
            "COMP4931",
            "COMP4941",
            "COMP8552",
            "COMP8031",
            "COMP8032",
            "COMP8041",
            "COMP8042",
            "COMP8033",
            "COMP9447",
            "COMP3901",
            "COMP3902",
            "COMP9945",
            "COMP9596"
        ],
        "courseUrl": "https://www.handbook.unsw.edu.au/undergraduate/courses/2019/COMP4911"
    },
    "COMP4920": {
        "courseCode": "COMP4920",
        "skills": [
            "control human factors patents technical strategy",
            "ethics workable ethical theories morality",
            "law privacy public information",
            "innovation engineering project planning",
            "significant software development project",
            "software project management",
            "include management issues",
            "ethical issues",
            "topics covered",
            "develop",
            "framework"
        ],
        "courseDesc": "\"This course will develop a framework on which management and ethical issues can be developed. and also develop skills in software project management.   Topics covered will include management issues such as:     management of innovation   engineering project planning and control   human factors   patents   technical strategy     In addition, the following ethics topics will be covered:     introduction to ethics   workable ethical theories   morality of breaking the law   privacy   public information and records   and related topics     Students carry out a significant software development project in teams.     \"",
        "similarCourses": [
            "COMP3900",
            "COMP9900",
            "COMP3601",
            "COMP1531",
            "COMP6449",
            "COMP1917",
            "COMP3311",
            "COMP3231",
            "COMP9201",
            "COMP9511",
            "COMP3511",
            "COMP3141",
            "COMP2041",
            "COMP3901",
            "COMP1911"
        ],
        "courseUrl": "https://www.handbook.unsw.edu.au/undergraduate/courses/2019/COMP4920"
    },
    "COMP4930": {
        "courseCode": "COMP4930",
        "skills": [
            "appropriate testing",
            "design",
            "construction"
        ],
        "courseDesc": "\"Thesis part A and B are done in the last two semesters of the BE degree program or during the two semesters of the CS Honours program. Students undertake directed laboratory and research work on an approved topic under the guidance of members of the academic staff. Usually, the Thesis involves the design and construction of experimental apparatus and/or software, together with appropriate testing and evaluation. For Part A, students are required to present a seminar and deliver a preliminary project report. For Part B, a written thesis describing the entire project must be submitted.     \"",
        "similarCourses": [
            "COMP4931",
            "COMP4910",
            "COMP4911",
            "COMP4941",
            "COMP8552",
            "COMP8031",
            "COMP8032",
            "COMP8041",
            "COMP8042",
            "COMP8033",
            "COMP3901",
            "COMP3902",
            "COMP3900",
            "COMP9900",
            "COMP9596"
        ],
        "courseUrl": "https://www.handbook.unsw.edu.au/undergraduate/courses/2019/COMP4930"
    },
    "COMP4931": {
        "courseCode": "COMP4931",
        "skills": [
            "appropriate testing",
            "design",
            "construction"
        ],
        "courseDesc": "\"Thesis part A and B are done in the last two semesters of the BE degree program or during the two semesters of the CS Honours program. Students undertake directed laboratory and research work on an approved topic under the guidance of members of the academic staff. Usually, the Thesis involves the design and construction of experimental apparatus and/or software, together with appropriate testing and evaluation. For Part A, students are required to present a seminar and deliver a preliminary project report. For Part B, a written thesis describing the entire project must be submitted.     \"",
        "similarCourses": [
            "COMP4930",
            "COMP4910",
            "COMP4911",
            "COMP4941",
            "COMP8552",
            "COMP8031",
            "COMP8032",
            "COMP8041",
            "COMP8042",
            "COMP8033",
            "COMP3901",
            "COMP3902",
            "COMP3900",
            "COMP9900",
            "COMP9596"
        ],
        "courseUrl": "https://www.handbook.unsw.edu.au/undergraduate/courses/2019/COMP4931"
    },
    "COMP4941": {
        "courseCode": "COMP4941",
        "skills": [
            "conjunction"
        ],
        "courseDesc": "\"This course in conjunction with Thesis part A  COMP4930  constitutes an 18 UoC advanced thesis option for excellent students and is suitable for those students desiring a more intensive research experience. The advanced thesis option may describe a higher level directed research work on an approved topic. Advanced thesis students must submit a draft manuscript for submission to a scientific conference or journal appropriate for the discipline along with their final thesis report.           \"",
        "similarCourses": [
            "COMP8552",
            "COMP8031",
            "COMP8032",
            "COMP8041",
            "COMP8042",
            "COMP8033",
            "COMP4930",
            "COMP4931",
            "COMP4910",
            "COMP4911",
            "COMP9945",
            "COMP9596",
            "COMP6448",
            "COMP4904",
            "COMP4905"
        ],
        "courseUrl": "https://www.handbook.unsw.edu.au/undergraduate/courses/2019/COMP4941"
    },
    "COMP6324": {
        "courseCode": "COMP6324",
        "skills": [
            "solution design",
            "expose students",
            "implementation",
            "applications"
        ],
        "courseDesc": "\"This course aims to introduce the students to core concepts and practical skills for designing and engineering IoT services and applications. Specifically, the course aims to expose students to IoT business strategy, requirements, IoT technologies, solution design and implementation.     \"",
        "similarCourses": [
            "COMP6733",
            "COMP2511",
            "COMP9322",
            "COMP1531",
            "COMP9321",
            "COMP1511",
            "COMP3222",
            "COMP9222",
            "COMP4121",
            "COMP1917",
            "COMP1010",
            "COMP6442",
            "COMP4314",
            "COMP4920",
            "COMP1000"
        ],
        "courseUrl": "https://www.handbook.unsw.edu.au/undergraduate/courses/2019/COMP6324"
    },
    "COMP6441": {
        "courseCode": "COMP6441",
        "skills": [
            "public cryptographic protocols",
            "case studies drawn",
            "engineering secure systems",
            "applied computer security",
            "social engineering",
            "computer security",
            "security fails",
            "security engineer",
            "security analysis",
            "physical security",
            "intrusion detection",
            "inter overflow",
            "information security",
            "heap attacks",
            "buffer overflow",
            "security",
            "research",
            "programming",
            "vulnerabilities",
            "signatures",
            "overview",
            "oriented",
            "integrity",
            "honeypots",
            "hashing",
            "hacking",
            "firewalls",
            "design",
            "cybercrime",
            "confidentiality",
            "capabilities",
            "authentication"
        ],
        "courseDesc": "\"Introduction to computer security, prevention of cybercrime and cyberterror. The principles of engineering secure systems. How to think like a security engineer.   Engineering secure systems. How security fails. Security analysis and design. Private and public cryptographic protocols. Introduction to information security: Confidentiality, Integrity, Authentication, Non-repudiation, hashing, signatures, bits of security. Physical security, social engineering, sniffing, intrusion detection, prevention and response, firewalls, honeypots. Overview of vulnerabilities and exploits including areas such as buffer overflow, inter overflow, heap attacks, Return-Oriented-Programming, heap attacks. Principles of risk and security. Case studies drawn from the history of hacking and from current events.   Additional topics drawn from recent developments and current research in applied computer security.   There are numerous formative assessments and activities throughout the course to provide feedback and learning opportunities. These do not directly contribute to your final grade but are expected to be used to provide evidence of your capabilities in your portfolio.   A programming background is not required but it will be helpful in some of the more applied topics. Students need a keen devious and analytical mind. To get the most from this course students will need to engage in independent study and research and be able to act as independent self-directed learners.     \"",
        "similarCourses": [
            "COMP6841",
            "COMP3441",
            "COMP9441",
            "COMP6843",
            "COMP6447",
            "COMP6443",
            "COMP9447",
            "COMP4337",
            "COMP9337",
            "COMP6449",
            "COMP4181",
            "COMP9181",
            "COMP9242",
            "COMP6448",
            "COMP9201"
        ],
        "courseUrl": "https://www.handbook.unsw.edu.au/undergraduate/courses/2019/COMP6441"
    },
    "COMP6442": {
        "courseCode": "COMP6442",
        "skills": [
            "construct new software systems",
            "software systems work",
            "modern society",
            "critical skill",
            "computational thinking",
            "understanding",
            "solving",
            "foundations",
            "computing"
        ],
        "courseDesc": "\"Computational thinking is a critical skill in modern society. This course aims to provide you with an understanding of the foundations of computing, how software systems work, and how to construct new software systems. By the end of the course, you will have produced an application  app  of your choice, solving a problem that's important to you.     \"",
        "similarCourses": [
            "COMP1010",
            "COMP4511",
            "COMP6447",
            "COMP4181",
            "COMP9181",
            "COMP2521",
            "COMP4128",
            "COMP1511",
            "COMP3222",
            "COMP9222",
            "COMP3153",
            "COMP6841",
            "COMP9153",
            "COMP6441",
            "COMP1521"
        ],
        "courseUrl": "https://www.handbook.unsw.edu.au/undergraduate/courses/2019/COMP6442"
    },
    "COMP6443": {
        "courseCode": "COMP6443",
        "skills": [
            "current best practice professional coding",
            "successfully develop secure web applications",
            "web application vulnerabilities",
            "software vulnerabilities exploited",
            "social vulnerabilities assurance",
            "reflect emerging vulnerabilities",
            "security aware",
            "web applications",
            "online attacks",
            "web programmers",
            "testing standards",
            "research"
        ],
        "courseDesc": "\"Web applications are currently the predominant source of software vulnerabilities exploited in in online attacks. There is a growing need and growing demand for web programmers to be security aware.   This course covers the main types of web application vulnerabilities and current best practice professional coding and testing practices to be able to successfully develop secure web applications.   The course covers OWASP vulnerabilities cross site scripting browser security model and weaknesses Injection attacks DNS Man in the middle Data leakage Spoofing UI and Social vulnerabilities Assurance and Testing Standards. Course coverage will be constantly updated over time to reflect emerging vulnerabilities and practices.   A programming background is not required but it will be helpful in some of the more applied topics. Students need a keen devious and analytical mind. To get the most from this course students will need to engage in independent study and research and be able to act as independent self directed learners.     \"",
        "similarCourses": [
            "COMP6843",
            "COMP6447",
            "COMP6441",
            "COMP6841",
            "COMP6449",
            "COMP4314",
            "COMP9447",
            "COMP3441",
            "COMP6714",
            "COMP9441",
            "COMP6445",
            "COMP4337",
            "COMP9337",
            "COMP6845",
            "COMP9321"
        ],
        "courseUrl": "https://www.handbook.unsw.edu.au/undergraduate/courses/2019/COMP6443"
    },
    "COMP6445": {
        "courseCode": "COMP6445",
        "skills": [
            "low level technical skills",
            "analyse simple forensic tools",
            "course covers memory forensics",
            "standard forensic tools",
            "professional forensic practice",
            "disc forensics network",
            "forensic theory",
            "analyse data",
            "device forensics",
            "stealth techniques",
            "law enforcement",
            "extract carve",
            "forensics",
            "logging"
        ],
        "courseDesc": "\"This course addresses the skills and knowledge needed by first responders to a discovered cyber breech, as well as law enforcement and criminal justice.   This course covers both forensic theory / professional practice, and looking at the underlying engineering of hiding, finding, interpreting and responding to traces. Students will use of standard forensic tools to extract carve and analyse data as well as learning the low level technical skills and knowledge underlying them. By the end of the course students should be able to write and analyse simple forensic tools as well as being able to use them.   The course covers Memory Forensics, Disc Forensics Network, Device Forensics, Stealth Techniques, Anti-forensics, Professional Forensic Practice,  chain of custody, records etc, Logging. Course coverage will be constantly updated over time to reflect emerging forensic practice and methods.     \"",
        "similarCourses": [
            "COMP6845",
            "COMP6449",
            "COMP6447",
            "COMP6443",
            "COMP6843",
            "COMP9322",
            "COMP3153",
            "COMP9153",
            "COMP4511",
            "COMP9417",
            "COMP1000",
            "COMP1921",
            "COMP4920",
            "COMP9441",
            "COMP1917"
        ],
        "courseUrl": "https://www.handbook.unsw.edu.au/undergraduate/courses/2019/COMP6445"
    },
    "COMP6447": {
        "courseCode": "COMP6447",
        "skills": [
            "analyse real world case studies",
            "return oriented programming course coverage",
            "skills including vulnerability classes",
            "common security models",
            "level software vulnerabilities",
            "war games competitions",
            "reflect emerging attack",
            "widespread systems",
            "technical process",
            "identify vulnerabilities",
            "defence methods",
            "vulnerabilities",
            "defence",
            "understanding",
            "theory",
            "research",
            "overflows",
            "exploited",
            "exploitation",
            "economics",
            "capabilities",
            "approaches"
        ],
        "courseDesc": "\"This course looks at cyber attack and defence. Students learn how to assess and identify vulnerabilities and how vulnerabilities are exploited. Students learn the principles and theory of exploitation, the common security models, and how approaches to exploitation and defence have evolved over time.   Students from this course will engage in war games competitions, analyse real world case studies of vulnerabilities in complex software used on widespread systems, and gain an understanding of the technical process of finding and fixing low-level software vulnerabilities and also of the economics and causal factors involved with their real world use.   The course covers techniques and skills including vulnerability classes, Source code auditing Fuzzing Security Bugs Software Security Assurance Taint Analysis Memory Corruption, Overflows, Return Oriented Programming Course coverage will be constantly updated over time to reflect emerging attack and defence methods.   There are numerous formative assessments and activities throughout the course to provide feedback and learning opportunities. These do not directly contribute to your final grade but are expected to be used to provide evidence of your capabilities in your portfolio.   Students need a keen devious and analytical mind. To get the most from this course students will need to engage in independent study and research and be able to act as independent self directed learners.     \"",
        "similarCourses": [
            "COMP6843",
            "COMP6441",
            "COMP6443",
            "COMP6841",
            "COMP6449",
            "COMP6445",
            "COMP6845",
            "COMP3441",
            "COMP1010",
            "COMP6442",
            "COMP9441",
            "COMP4181",
            "COMP9181",
            "COMP3141",
            "COMP4511"
        ],
        "courseUrl": "https://www.handbook.unsw.edu.au/undergraduate/courses/2019/COMP6447"
    },
    "COMP6448": {
        "courseCode": "COMP6448",
        "skills": [
            "security area giving",
            "visiting expert",
            "topics depend",
            "precise timing",
            "intensive mode",
            "advanced topic",
            "workshops"
        ],
        "courseDesc": "\"This is an occasional course that will involve a visiting expert in the security area giving a series of lectures and workshops on an advanced topic in cyber security. The precise timing and topics depend on the visitor. The course will be run in intensive mode.     \"",
        "similarCourses": [
            "COMP6441",
            "COMP6841",
            "COMP4941",
            "COMP8552",
            "COMP8031",
            "COMP8032",
            "COMP8041",
            "COMP8042",
            "COMP8033",
            "COMP9441",
            "COMP6721",
            "COMP6449",
            "COMP3441",
            "COMP4337",
            "COMP9337"
        ],
        "courseUrl": "https://www.handbook.unsw.edu.au/undergraduate/courses/2019/COMP6448"
    },
    "COMP6449": {
        "courseCode": "COMP6449",
        "skills": [
            "mandatory data breech disclosure",
            "real world case studies",
            "reflect emerging best practice",
            "critique effective professional responses",
            "security engineering profession",
            "current best practice",
            "coverage includes standards",
            "organisational change management",
            "best practice",
            "professional issues",
            "organisational analysis",
            "culture change",
            "regularly updated",
            "key issues",
            "censorship terrorism",
            "risk assessment",
            "testing",
            "privacy",
            "legal",
            "leadership",
            "industry",
            "cybercrime",
            "challenges",
            "audits",
            "analyse"
        ],
        "courseDesc": "\"The professional practice of cyber security. Students learn how to be effective and ethical cyber security professionals.   Students from this course will engage in real world case studies and analyse and critique effective professional responses to situations and challenges. Guest lecturers from Industry will give a number of different views into the world of cyber security professionals, the key issues they face, and current best practice.   Coverage includes Standards, Audits, Organisational Analysis and Testing, Best Practice, Ethics, Legal, Professionalism. Professional issues and best practice in cybercrime, censorship terrorism, IP, mandatory data breech disclosure, privacy, risk assessment, institutional response to risk, leadership, organisational change management and culture change, Professional Practice and professionalism. Course coverage will be regularly updated over time to reflect emerging best practice in the security engineering profession.     \"",
        "similarCourses": [
            "COMP6445",
            "COMP6845",
            "COMP6443",
            "COMP6447",
            "COMP6843",
            "COMP6841",
            "COMP6441",
            "COMP3441",
            "COMP9441",
            "COMP4920",
            "COMP4337",
            "COMP9337",
            "COMP6448",
            "COMP4511",
            "COMP3601"
        ],
        "courseUrl": "https://www.handbook.unsw.edu.au/undergraduate/courses/2019/COMP6449"
    },
    "COMP6714": {
        "courseCode": "COMP6714",
        "skills": [
            "language models e evaluation methods f relevance feedback",
            "web search engine architecture b web crawling",
            "document modeling b inverted index construction",
            "compression c vector space model",
            "indexing c web structure",
            "web search",
            "ranking methods",
            "query expansion",
            "information retrieval",
            "probabilistic"
        ],
        "courseDesc": "\"Information Retrieval:  a  Document modeling  b  Inverted index construction and compression   c  Vector space model and ranking methods  d  Probabilistic and language models  e  Evaluation methods  f  Relevance feedback and query expansion.  Web Search:  a  Web search engine architecture  b  Web crawling and indexing  c  Web structure and usage analytics. The lecture materials will be complemented by projects and assignments.     \"",
        "similarCourses": [
            "COMP9319",
            "COMP4314",
            "COMP9321",
            "COMP6443",
            "COMP6843",
            "COMP9318",
            "COMP9322",
            "COMP4930",
            "COMP4931",
            "COMP9418",
            "COMP4910",
            "COMP4911",
            "COMP3411",
            "COMP3891",
            "COMP1531"
        ],
        "courseUrl": "https://www.handbook.unsw.edu.au/undergraduate/courses/2019/COMP6714"
    },
    "COMP6721": {
        "courseCode": "COMP6721",
        "skills": [
            "good programming practices",
            "additional correctness criteria",
            "practical programming tools",
            "practical structuring",
            "functional correctness",
            "traditional route",
            "sorting program",
            "randomisation implement",
            "larger set",
            "internet protocols",
            "design patterns",
            "formal methods",
            "effectiveness",
            "calculation"
        ],
        "courseDesc": "\" In- Formal Methods are practical structuring and design patterns that encourage programming that is easy to understand and to maintain. They are only a part of the large body of  good programming practices, distinguished from that larger set because -for the methods we consider- the computer science community has determined the science behind the structures: we know why they are effective.Unusually, this course does not take the traditional route of teaching that science first, and then turning it into practical programming  tools-of-thought. Instead, we teach the mental tools first, try them on examples and only then, once their effectiveness has been demonstrated, will we look behind the scenes to see where they come from.Initially the material will deal with conventional programs, those that much  give the right output.  this is known as functional correctness, and a sorting program is a simple example. Later in the course we will look at additional correctness criteria, such as security  perform this calculation in a way that keeps part of the answer hidden  and randomisation  implement over-the-internet protocols that depend intrinsically on coin-flipping. Those last two topics will draw on up-to-the-minute research.     \"",
        "similarCourses": [
            "COMP3153",
            "COMP9153",
            "COMP2521",
            "COMP6741",
            "COMP9999",
            "COMP3141",
            "COMP1000",
            "COMP6448",
            "COMP9334",
            "COMP4904",
            "COMP4930",
            "COMP4931",
            "COMP9021",
            "COMP4161",
            "COMP4910"
        ],
        "courseUrl": "https://www.handbook.unsw.edu.au/undergraduate/courses/2019/COMP6721"
    },
    "COMP6731": {
        "courseCode": "COMP6731",
        "skills": [
            "simplify required structures graph theory",
            "adaptive space partition",
            "simplex search",
            "proximity search",
            "point location",
            "motion planning",
            "disjoint paths",
            "collection apis",
            "chromatic number",
            "patterns",
            "orthogonal",
            "isomorphism",
            "implementation",
            "geometry",
            "generics",
            "eccentricity",
            "documentation",
            "development",
            "design",
            "deployment",
            "constraints",
            "connectivity",
            "binary"
        ],
        "courseDesc": "\"Scope of topics to be covered: Geometry - orthogonal and simplex search - proximity search - point location - binary and adaptive space partition - motion planning and patterns * proporties/constraints that simplify required structures Graph Theory - connectivity - planarity - flow, transshipment, and transprtation problems - chromatic number - isomorphism - disjoint paths and cycles - centrality - distances and eccentricity * proporties/constraints that affect the above properties. API use and development - collection APIs - generics - design, implementation, documentation and deployment.       \"",
        "similarCourses": [
            "COMP4337",
            "COMP9337",
            "COMP9020",
            "COMP1000",
            "COMP1531",
            "COMP9319",
            "COMP9116",
            "COMP9322",
            "COMP6714",
            "COMP6721",
            "COMP4128",
            "COMP2521",
            "COMP3141",
            "COMP6741",
            "COMP9024"
        ],
        "courseUrl": "https://www.handbook.unsw.edu.au/undergraduate/courses/2019/COMP6731"
    },
    "COMP6733": {
        "courseCode": "COMP6733",
        "skills": [
            "low level programming language",
            "high level programming language",
            "based stress level sensing",
            "sensor data smoothing",
            "inertial sensing",
            "data fusion",
            "topics covered",
            "security issues",
            "experimental approach",
            "activity recognition",
            "cloud services",
            "services",
            "voice",
            "sensors",
            "python",
            "light",
            "internet",
            "hands",
            "filtering",
            "computing"
        ],
        "courseDesc": "\"Internet of Things  IoT  will play a key role in the next frontier of computing. The new course will provide an experimental approach to cover fundamental design principles behind building IoT applications, with hands-on experience with a popular end-to-end IoT platform.Topics covered will include a selection from: IoT technology and services, IoT system architecture, Low Power communications  Bluetooth Low Energy and 6LoWPAN  and security issues, sensors and sensor data smoothing and filtering, light-weight in-situ machine learning and data fusion, inertial sensing, activity recognition and fitness morning, voice-based stress level sensing, biometric authentication, anonymity, cloud services for IoT. This course assumes familiarity with a high level programming language such as Java and Python AND a low level programming language such as C.     \"",
        "similarCourses": [
            "COMP6324",
            "COMP4337",
            "COMP9337",
            "COMP9417",
            "COMP1917",
            "COMP2121",
            "COMP9032",
            "COMP9021",
            "COMP1911",
            "COMP3411",
            "COMP4335",
            "COMP9335",
            "COMP1511",
            "COMP4411",
            "COMP9414"
        ],
        "courseUrl": "https://www.handbook.unsw.edu.au/undergraduate/courses/2019/COMP6733"
    },
    "COMP6741": {
        "courseCode": "COMP6741",
        "skills": [
            "dynamic programming across subsets",
            "strong exponential time hypothesis",
            "hard computational problems",
            "gives efficient algorithms",
            "polynomial time algorithm",
            "polynomial kernels subject",
            "computable function f",
            "running time",
            "branching algorithms",
            "polynomial dependence",
            "theoretic assumptions",
            "local search",
            "iterative compression",
            "colour coding",
            "algorithms",
            "complexity",
            "branching",
            "conquer"
        ],
        "courseDesc": "\"The course focuses on algorithms for exactly solving NP-hard computational problems. Since no polynomial time algorithm is known for any of these problems, the running time of the algorithms will have a super-polynomial dependence on the input size or some other parameter of the input.   The first part presents algorithmic techniques to solve NP-hard problems provably faster than brute-force in the worst case, such as branching algorithms, dynamic programming across subsets, inclusion-exclusion, local search, and measure &amp; conquer. We will also see lower bounds for algorithms and how to rule out certain running times assuming the  Strong  Exponential Time Hypothesis.   Whereas the first part presents  default  algorithms that one would use without knowing much about the instances one is about to solve, the second part acknowledges that the complexity of an instance does not only depend on its size n. A parameter k is associated with each instance and the parameterized complexity framework aims at designing fixed-parameter algorithms whose running times are f k *poly n  for a computable function f. This gives efficient algorithms for small values of the parameter obtained via techniques such as branching, colour coding, iterative compression, and kernelization  preprocessing. We will also see problems that are not fixed-parameter tractable and not kernelizable to polynomial kernels subject to complexity-theoretic assumptions.     \"",
        "similarCourses": [
            "COMP4128",
            "COMP6721",
            "COMP2521",
            "COMP3121",
            "COMP4129",
            "COMP1000",
            "COMP4141",
            "COMP1511",
            "COMP1927",
            "COMP9101",
            "COMP4121",
            "COMP4511",
            "COMP9153",
            "COMP9417",
            "COMP9319"
        ],
        "courseUrl": "https://www.handbook.unsw.edu.au/undergraduate/courses/2019/COMP6741"
    },
    "COMP6752": {
        "courseCode": "COMP6752",
        "skills": [
            "distributed systems e",
            "design decisions underlying",
            "modelling concurrent systems",
            "concurrent systems",
            "true concurrency",
            "temporal logic",
            "system behaviour",
            "semantic equivalences",
            "process algebra",
            "implementation relations",
            "event structures",
            "equivalence checking",
            "concurrency found",
            "computational perspectives",
            "art techniques",
            "successful models",
            "semantic models",
            "mathematical models",
            "design",
            "concurrent",
            "models",
            "mathematical",
            "state",
            "philosophical",
            "operational",
            "modal",
            "literature",
            "component",
            "complexity",
            "comparing",
            "algorithms"
        ],
        "courseDesc": "\"This course tries to make students familiar with state-of-the-art techniques in modelling concurrent systems. This is done by comparing some of the more successful models of concurrency found in the literature. The focus will be on the rationale behind the design decisions underlying those models, viewed from philosophical, mathematical and computational perspectives. The course contains important background knowledge for students aiming at a scientific career in which the design of mathematical models of system behaviour is a component.   Topics chosen from: semantic models of concurrent and distributed systems  e.g. process algebra, event structures, Petri nets, Chu spaces, operational and denotational semantics, semantic equivalences and implementation relations, linear versus branching time, interleaving versus partial order semantics, true concurrency, algorithms for equivalence checking and their complexity, modal and temporal logic for concurrent systems.     \"",
        "similarCourses": [
            "COMP9152",
            "COMP3152",
            "COMP4001",
            "COMP3151",
            "COMP9322",
            "COMP9418",
            "COMP9243",
            "COMP9313",
            "COMP9314",
            "COMP9511",
            "COMP3511",
            "COMP3222",
            "COMP9222",
            "COMP3121",
            "COMP4121"
        ],
        "courseUrl": "https://www.handbook.unsw.edu.au/undergraduate/courses/2019/COMP6752"
    },
    "COMP6771": {
        "courseCode": "COMP6771",
        "skills": [
            "standard template library e",
            "run time type information",
            "oriented inheritance techniques",
            "oriented programming",
            "advanced techniques",
            "generic programming",
            "exception handling",
            "efficiency issues",
            "templates",
            "memory",
            "functions",
            "containers"
        ],
        "courseDesc": "\"This course introduces the fundamentals and advanced techniques of object-oriented programming in C++.Object-oriented inheritance techniques. Advanced techniques with functions. Memory and resource managment. Namespaces. Run time type information. Templates and generic programming. C++ Template metaprogramming. The Standard Template Library  e.g., algorithms, containers and iterators. Input/Output wth C++ iostreams library. Exception handling. C++ and Efficiency issues. Effective C++ design guidelines.     \"",
        "similarCourses": [
            "COMP3171",
            "COMP9171",
            "COMP2511",
            "COMP3121",
            "COMP4001",
            "COMP4128",
            "COMP4129",
            "COMP9315",
            "COMP1521",
            "COMP4121",
            "COMP9102",
            "COMP3153",
            "COMP6448",
            "COMP3131",
            "COMP9153"
        ],
        "courseUrl": "https://www.handbook.unsw.edu.au/undergraduate/courses/2019/COMP6771"
    },
    "COMP6841": {
        "courseCode": "COMP6841",
        "skills": [
            "public cryptographic protocols",
            "case studies drawn",
            "engineering secure systems",
            "applied computer security",
            "social engineering",
            "computer security",
            "security fails",
            "security engineer",
            "security analysis",
            "physical security",
            "intrusion detection",
            "inter overflow",
            "information security",
            "heap attacks",
            "extended version",
            "buffer overflow",
            "c programming",
            "security",
            "programming",
            "research",
            "vulnerabilities",
            "signatures",
            "overview",
            "oriented",
            "integrity",
            "honeypots",
            "hashing",
            "hacking",
            "firewalls",
            "design",
            "cybercrime",
            "confidentiality",
            "capabilities",
            "authentication"
        ],
        "courseDesc": "\"Introduction to computer security, cybercrime, and cyberterror. The principles of engineering secure systems. How to think like a security engineer.   Engineering secure systems. How security fails. Security analysis and design. Private and public cryptographic protocols. Introduction to information security: Confidentiality, Integrity, Authentication, Non-repudiation, hashing, signatures, bits of security. Physical security, social engineering, sniffing, intrusion detection, prevention and response, firewalls, honeypots. Overview of vulnerabilities and exploits including areas such as buffer overflow, inter overflow, heap attacks, Return-Oriented-Programming, heap attacks. Principles of risk and security. Case studies drawn from the history of hacking and from current events.   Additional topics drawn from recent developments and current research in applied computer security.   There are numerous formative assessments and activities throughout the course to provide feedback and learning opportunities. These do not directly contribute to your final grade but are expected to be used to provide evidence of your capabilities in your portfolio.   A programming background is required, especially for the more applied topics. Students need a keen devious and analytical mind. To get the most from this course students will need to engage in independent study and research and be able to act as independent self-directed learners.     This is the extended version of COMP6441. In addition to the COMP6441 material above, this course includes coverage of reversing x86 machine code into C/C++ and an introduction to malware decomposition and analysis   Note: This course requires knowledge of C programming       \"",
        "similarCourses": [
            "COMP6441",
            "COMP3441",
            "COMP9441",
            "COMP6843",
            "COMP6447",
            "COMP6443",
            "COMP9447",
            "COMP4337",
            "COMP9337",
            "COMP6449",
            "COMP4181",
            "COMP9181",
            "COMP1511",
            "COMP1010",
            "COMP6442"
        ],
        "courseUrl": "https://www.handbook.unsw.edu.au/undergraduate/courses/2019/COMP6841"
    },
    "COMP6843": {
        "courseCode": "COMP6843",
        "skills": [
            "current best practice professional coding",
            "successfully develop secure web applications",
            "web application vulnerabilities",
            "software vulnerabilities exploited",
            "social vulnerabilities assurance",
            "reflect emerging vulnerabilities",
            "conduct penetration tests",
            "security aware",
            "web applications",
            "online attacks",
            "web programmers",
            "testing standards",
            "simulated clients",
            "extended version",
            "research",
            "capabilities"
        ],
        "courseDesc": "\"Web applications are currently the predominant source of software vulnerabilities exploited in in online attacks. There is a growing need and growing demand for web programmers to be security aware.   This course covers the main types of web application vulnerabilities and current best practice professional coding and testing practices to be able to successfully develop secure web applications.   The course covers OWASP vulnerabilities cross site scripting browser security model and weaknesses Injection attacks DNS Man in the middle Data leakage Spoofing UI and Social vulnerabilities Assurance and Testing Standards. Course coverage will be constantly updated over time to reflect emerging vulnerabilities and practices.   There are numerous formative assessments and activities throughout the course to provide feedback and learning opportunities. These do not directly contribute to your final grade but are expected to be used to provide evidence of your capabilities in your portfolio.   A programming background is required. Students also need a keen devious and analytical mind. To get the most from this course students will need to engage in independent study and research and be able to act as independent self directed learners.   This is the extended version of COMP6443. This course includes the material of COMP6443 plus penetration testing, and red teaming. Students will work in teams to conduct penetration tests and report on them to real and simulated clients.     \"",
        "similarCourses": [
            "COMP6443",
            "COMP6447",
            "COMP6841",
            "COMP6441",
            "COMP6449",
            "COMP9447",
            "COMP6845",
            "COMP4314",
            "COMP6714",
            "COMP6445",
            "COMP3441",
            "COMP9441",
            "COMP3900",
            "COMP9900",
            "COMP4337"
        ],
        "courseUrl": "https://www.handbook.unsw.edu.au/undergraduate/courses/2019/COMP6843"
    },
    "COMP6845": {
        "courseCode": "COMP6845",
        "skills": [
            "low level technical skills",
            "analyse simple forensic tools",
            "course covers memory forensics",
            "standard forensic tools",
            "professional forensic practice",
            "disc forensics network",
            "forensic theory",
            "analyse data",
            "device forensics",
            "stealth techniques",
            "law enforcement",
            "extract carve",
            "extended version",
            "forensics",
            "logging"
        ],
        "courseDesc": "\"This course addresses the skills and knowledge needed by first responders to a discovered cyber breech, as well as law enforcement and criminal justice.   This course covers both forensic theory / professional practice, and looking at the underlying engineering of hiding, finding, interpreting and responding to traces. Students will use of standard forensic tools to extract carve and analyse data as well as learning the low level technical skills and knowledge underlying them. By the end of the course students should be able to write and analyse simple forensic tools as well as being able to use them.   The course covers Memory Forensics, Disc Forensics Network, Device Forensics, Stealth Techniques, Anti-forensics, Professional Forensic Practice,  chain of custody, records etc, Logging. Course coverage will be constantly updated over time to reflect emerging forensic practice and methods.   This is the extended version of COMP6445. This course includes the material of COMP6445 plus malware analysis and incident response.     \"",
        "similarCourses": [
            "COMP6445",
            "COMP6449",
            "COMP6843",
            "COMP6447",
            "COMP6443",
            "COMP9322",
            "COMP3153",
            "COMP9153",
            "COMP6841",
            "COMP4511",
            "COMP9417",
            "COMP3141",
            "COMP1511",
            "COMP1000",
            "COMP4181"
        ],
        "courseUrl": "https://www.handbook.unsw.edu.au/undergraduate/courses/2019/COMP6845"
    },
    "COMP8031": {
        "courseCode": "COMP8031",
        "skills": [
            "engineering",
            "conjunction"
        ],
        "courseDesc": "\"and Engineering   This course in conjunction with Thesis part A  COMP4930  constitutes an 18 UoC advanced thesis option for excellent students and is suitable for those students desiring a more intensive research experience. The advanced thesis option may describe a higher level directed research work on an approved topic. Advanced thesis students must submit a draft manuscript for submission to a scientific conference or journal appropriate for the discipline along with their final thesis report.           \"",
        "similarCourses": [
            "COMP8032",
            "COMP8041",
            "COMP8042",
            "COMP4941",
            "COMP8552",
            "COMP8033",
            "COMP4930",
            "COMP4931",
            "COMP4910",
            "COMP4911",
            "COMP9945",
            "COMP9596",
            "COMP6448",
            "COMP4904",
            "COMP4905"
        ],
        "courseUrl": "https://www.handbook.unsw.edu.au/undergraduate/courses/2019/COMP8031"
    },
    "COMP8032": {
        "courseCode": "COMP8032",
        "skills": [
            "engineering",
            "conjunction"
        ],
        "courseDesc": "\"and Engineering   This course in conjunction with Thesis part A  COMP4930  constitutes an 18 UoC advanced thesis option for excellent students and is suitable for those students desiring a more intensive research experience. The advanced thesis option may describe a higher level directed research work on an approved topic. Advanced thesis students must submit a draft manuscript for submission to a scientific conference or journal appropriate for the discipline along with their final thesis report.           \"",
        "similarCourses": [
            "COMP8031",
            "COMP8041",
            "COMP8042",
            "COMP4941",
            "COMP8552",
            "COMP8033",
            "COMP4930",
            "COMP4931",
            "COMP4910",
            "COMP4911",
            "COMP9945",
            "COMP9596",
            "COMP6448",
            "COMP4904",
            "COMP4905"
        ],
        "courseUrl": "https://www.handbook.unsw.edu.au/undergraduate/courses/2019/COMP8032"
    },
    "COMP8033": {
        "courseCode": "COMP8033",
        "skills": [
            "conjunction"
        ],
        "courseDesc": "\"and Engineeri   This course in conjunction with Thesis part A  COMP4930  constitutes an 18 UoC advanced thesis option for excellent students and is suitable for those students desiring a more intensive research experience. The advanced thesis option may describe a higher level directed research work on an approved topic. Advanced thesis students must submit a draft manuscript for submission to a scientific conference or journal appropriate for the discipline along with their final thesis report.           \"",
        "similarCourses": [
            "COMP4941",
            "COMP8552",
            "COMP8031",
            "COMP8032",
            "COMP8041",
            "COMP8042",
            "COMP4930",
            "COMP4931",
            "COMP4910",
            "COMP4911",
            "COMP9945",
            "COMP9596",
            "COMP6448",
            "COMP4904",
            "COMP4905"
        ],
        "courseUrl": "https://www.handbook.unsw.edu.au/undergraduate/courses/2019/COMP8033"
    },
    "COMP8041": {
        "courseCode": "COMP8041",
        "skills": [
            "engineering",
            "conjunction"
        ],
        "courseDesc": "\"and Engineering   This course in conjunction with Thesis part A  COMP4930  constitutes an 18 UoC advanced thesis option for excellent students and is suitable for those students desiring a more intensive research experience. The advanced thesis option may describe a higher level directed research work on an approved topic. Advanced thesis students must submit a draft manuscript for submission to a scientific conference or journal appropriate for the discipline along with their final thesis report.           \"",
        "similarCourses": [
            "COMP8031",
            "COMP8032",
            "COMP8042",
            "COMP4941",
            "COMP8552",
            "COMP8033",
            "COMP4930",
            "COMP4931",
            "COMP4910",
            "COMP4911",
            "COMP9945",
            "COMP9596",
            "COMP6448",
            "COMP4904",
            "COMP4905"
        ],
        "courseUrl": "https://www.handbook.unsw.edu.au/undergraduate/courses/2019/COMP8041"
    },
    "COMP8042": {
        "courseCode": "COMP8042",
        "skills": [
            "engineering",
            "conjunction"
        ],
        "courseDesc": "\"and Engineering   This course in conjunction with Thesis part A  COMP4930  constitutes an 18 UoC advanced thesis option for excellent students and is suitable for those students desiring a more intensive research experience. The advanced thesis option may describe a higher level directed research work on an approved topic. Advanced thesis students must submit a draft manuscript for submission to a scientific conference or journal appropriate for the discipline along with their final thesis report.           \"",
        "similarCourses": [
            "COMP8031",
            "COMP8032",
            "COMP8041",
            "COMP4941",
            "COMP8552",
            "COMP8033",
            "COMP4930",
            "COMP4931",
            "COMP4910",
            "COMP4911",
            "COMP9945",
            "COMP9596",
            "COMP6448",
            "COMP4904",
            "COMP4905"
        ],
        "courseUrl": "https://www.handbook.unsw.edu.au/undergraduate/courses/2019/COMP8042"
    },
    "COMP8522": {
        "courseCode": "COMP8522",
        "skills": [],
        "courseDesc": "\"test test     \"",
        "similarCourses": [
            "COMP4181",
            "COMP9181",
            "COMP4511",
            "COMP9999",
            "COMP9801",
            "COMP9814",
            "COMP9844",
            "COMP3821",
            "COMP9283",
            "COMP3891",
            "COMP3901",
            "COMP9315",
            "COMP1917",
            "COMP3902",
            "COMP9334"
        ],
        "courseUrl": "https://www.handbook.unsw.edu.au/undergraduate/courses/2019/COMP8522"
    },
    "COMP8552": {
        "courseCode": "COMP8552",
        "skills": [
            "conjunction"
        ],
        "courseDesc": "\"This course in conjunction with Thesis part A  COMP4930  constitutes an 18 UoC advanced thesis option for excellent students and is suitable for those students desiring a more intensive research experience. The advanced thesis option may describe a higher level directed research work on an approved topic. Advanced thesis students must submit a draft manuscript for submission to a scientific conference or journal appropriate for the discipline along with their final thesis report.           \"",
        "similarCourses": [
            "COMP4941",
            "COMP8031",
            "COMP8032",
            "COMP8041",
            "COMP8042",
            "COMP8033",
            "COMP4930",
            "COMP4931",
            "COMP4910",
            "COMP4911",
            "COMP9945",
            "COMP9596",
            "COMP6448",
            "COMP4904",
            "COMP4905"
        ],
        "courseUrl": "https://www.handbook.unsw.edu.au/undergraduate/courses/2019/COMP8552"
    },
    "COMP9018": {
        "courseCode": "COMP9018",
        "skills": [
            "3d graphics hardware design",
            "detailed surface models",
            "animated file formats",
            "3d graphics software",
            "image based rendering",
            "3d still",
            "advanced modelling",
            "advanced features",
            "volumetric rendering",
            "metropolis rendering",
            "ray tracing",
            "performance optimisation",
            "collision detection",
            "animation techniques",
            "graphics",
            "optimisations",
            "interest"
        ],
        "courseDesc": "\"Assumed knowledge: Experience with OpenGL and Java.This course covers advanced topics in graphics and related technologies with a strong hands-on and interactive focus. Topics include: advanced features of OpenGL; 2D and 3D still, interactive and animated file formats; advanced modelling and animation techniques; detailed surface models; performance optimisation; radiosity; ray tracing and optimisations; Monte Carlo and metropolis rendering; volumetric rendering; image based rendering; interactivity; collision detection and 3D graphics hardware design. Students will be given the opportunity to present seminars on research areas of interest to them, as well as experiment with 3D graphics software.This course will be extremely interactive. You'll be expected to be involved.     \"",
        "similarCourses": [
            "COMP9242",
            "COMP9243",
            "COMP9311",
            "COMP3421",
            "COMP9415",
            "COMP9024",
            "COMP1531",
            "COMP9116",
            "COMP9211",
            "COMP3211",
            "COMP9418",
            "COMP9322",
            "COMP1400",
            "COMP9444",
            "COMP9315"
        ],
        "courseUrl": "https://www.handbook.unsw.edu.au/undergraduate/courses/2019/COMP9018"
    },
    "COMP9020": {
        "courseCode": "COMP9020",
        "skills": [
            "relation theory",
            "mathematical methods",
            "graph theory",
            "efficient programs",
            "discrete probability",
            "boolean algebras",
            "algorithmic applications",
            "algorithm analysis",
            "logic",
            "verification",
            "trees",
            "recursion",
            "mathematics",
            "functions"
        ],
        "courseDesc": "\"Scope: * Mathematical methods for designing correct and efficient programs.* Mathematics for algorithm analysis.* Logic for proving and verification.Topics: * Introduction to set and relation theory* Propositional logic and boolean algebras* Induction, recursion and recurrence relations  Order of growth of functions. Structured counting  combinatorics * Discrete probability* Graph theory* Trees for algorithmic applications     \"",
        "similarCourses": [
            "COMP6731",
            "COMP4161",
            "COMP3121",
            "COMP6752",
            "COMP9152",
            "COMP3152",
            "COMP2521",
            "COMP1921",
            "COMP4121",
            "COMP9418",
            "COMP9101",
            "COMP3411",
            "COMP2111",
            "COMP6741",
            "COMP9334"
        ],
        "courseUrl": "https://www.handbook.unsw.edu.au/undergraduate/courses/2019/COMP9020"
    },
    "COMP9021": {
        "courseCode": "COMP9021",
        "skills": [
            "involving graphical user interfaces",
            "object oriented constructs",
            "high level language",
            "fundamental programming techniques",
            "data structures",
            "programming",
            "testing",
            "simulation",
            "python",
            "procedural",
            "implementation",
            "debugging",
            "applications",
            "animations",
            "algorithms"
        ],
        "courseDesc": "\"This is a first programming course. It provides an introduction to programming in Python and covers the following essentials:   Program design and implementation in a high level language, with procedural and object oriented constructs and some functional features. Fundamental programming techniques, data structures and algorithms. Debugging and testing. Simulation. Applications in different areas, including those involving graphical user interfaces and animations.     \"",
        "similarCourses": [
            "COMP1917",
            "COMP1911",
            "COMP9161",
            "COMP2521",
            "COMP1400",
            "COMP2041",
            "COMP1511",
            "COMP9511",
            "COMP3511",
            "COMP1927",
            "COMP9102",
            "COMP6733",
            "COMP3131",
            "COMP2511",
            "COMP1531"
        ],
        "courseUrl": "https://www.handbook.unsw.edu.au/undergraduate/courses/2019/COMP9021"
    },
    "COMP9024": {
        "courseCode": "COMP9024",
        "skills": [
            "sorting algorithms",
            "search trees",
            "hash tables",
            "data types",
            "data structures",
            "stacks",
            "searching",
            "representations",
            "queues",
            "lists",
            "heaps",
            "graphs",
            "dictionaries",
            "abstractions"
        ],
        "courseDesc": "\"Data types and data structures: abstractions and representations; lists, stacks, queues, heaps, graphs; dictionaries and hash tables; search trees; searching and sorting algorithms.     \"",
        "similarCourses": [
            "COMP9242",
            "COMP1927",
            "COMP9311",
            "COMP9018",
            "COMP9243",
            "COMP2521",
            "COMP3121",
            "COMP9101",
            "COMP4314",
            "COMP1531",
            "COMP9444",
            "COMP9211",
            "COMP3211",
            "COMP9322",
            "COMP9319"
        ],
        "courseUrl": "https://www.handbook.unsw.edu.au/undergraduate/courses/2019/COMP9024"
    },
    "COMP9032": {
        "courseCode": "COMP9032",
        "skills": [
            "low level device drivers",
            "floating point number representation",
            "digital signals data acquisition",
            "assembly language programming methodology",
            "machine language programming",
            "machine language fundamentals",
            "converting analog signals",
            "instruction repertoire",
            "analog input",
            "serial communication",
            "memory system",
            "driving actuators",
            "computer arithmetic",
            "addressing modes",
            "assembly",
            "variety",
            "timers",
            "sensors",
            "interrupts",
            "buses"
        ],
        "courseDesc": "\"Instruction Set Architecture  ISA, floating point number representation, computer arithmetic, assembly and machine language programming, machine language fundamentals; addressing modes; instruction repertoire, assembly language programming methodology, interrupts and I/O interfacing  hardware and software, serial communication, timers, analog input and output, converting analog signals to digital signals  data acquisition, taking input from a variety of sensors and driving actuators, buses and memory system, low level device drivers.     \"",
        "similarCourses": [
            "COMP2121",
            "COMP9414",
            "COMP3411",
            "COMP9242",
            "COMP6733",
            "COMP1917",
            "COMP9211",
            "COMP9116",
            "COMP1521",
            "COMP3211",
            "COMP1911",
            "COMP9243",
            "COMP1531",
            "COMP9018",
            "COMP9444"
        ],
        "courseUrl": "https://www.handbook.unsw.edu.au/undergraduate/courses/2019/COMP9032"
    },
    "COMP9101": {
        "courseCode": "COMP9101",
        "skills": [
            "performance analysis",
            "order statistics",
            "greedy strategy",
            "flow networks",
            "dynamic programming",
            "computational problems",
            "bounding summations",
            "asymptotic notations",
            "arithmetic circuits",
            "case analysis",
            "approximation algorithms",
            "design techniques",
            "design",
            "algorithms",
            "variety",
            "trees",
            "sorting",
            "recurrences",
            "memorisation",
            "matrices",
            "intractability",
            "graphs",
            "divide",
            "conquer",
            "completeness",
            "branch",
            "backtracking"
        ],
        "courseDesc": "\"Techniques for design and performance analysis of algorithms for a variety of computational problems. Asymptotic notations, bounding summations, recurrences, best-case, worst-case and average-case analysis. Design techniques: divide-and-conquer, dynamic programming and memorisation, greedy strategy, backtracking, branch-and-bound. Algorithms: sorting and order statistics, trees, graphs and flow networks, matrices, arithmetic circuits. Intractability: classes P, NP, and NP-completeness, approximation algorithms.     \"",
        "similarCourses": [
            "COMP3121",
            "COMP4128",
            "COMP9024",
            "COMP4121",
            "COMP2521",
            "COMP3222",
            "COMP9222",
            "COMP4141",
            "COMP2911",
            "COMP4129",
            "COMP6741",
            "COMP1927",
            "COMP9334",
            "COMP9444",
            "COMP6752"
        ],
        "courseUrl": "https://www.handbook.unsw.edu.au/undergraduate/courses/2019/COMP9101"
    },
    "COMP9102": {
        "courseCode": "COMP9102",
        "skills": [
            "small programming language",
            "modern programming language",
            "free parsing techniques",
            "compiler front ends",
            "programming languages",
            "type checking",
            "regular expressions",
            "implementation techniques",
            "formal translation",
            "directed translation",
            "compilers emphasis",
            "code generation",
            "attribute grammars",
            "program syntax",
            "compiler",
            "syntax",
            "implementation",
            "semantics",
            "finite",
            "context"
        ],
        "courseDesc": "\"Covers the fundamental principles in programming languages and implementation techniques for compilers  emphasis on compiler front ends. Course contents include: program syntax and semantics, formal translation of programming languages, finite-state recognisers and regular expressions, context-free parsing techniques such as LL k  and LR k, attribute grammars, syntax-directed translation, type checking and code generation. Lab: implementation of a compiler in a modern programming language for a small programming language.     \"",
        "similarCourses": [
            "COMP3131",
            "COMP9161",
            "COMP4141",
            "COMP1917",
            "COMP9021",
            "COMP1911",
            "COMP3411",
            "COMP4181",
            "COMP9181",
            "COMP2041",
            "COMP9116",
            "COMP9311",
            "COMP6741",
            "COMP3311",
            "COMP2511"
        ],
        "courseUrl": "https://www.handbook.unsw.edu.au/undergraduate/courses/2019/COMP9102"
    },
    "COMP9116": {
        "courseCode": "COMP9116",
        "skills": [
            "current code generator generates c",
            "complete software cycle",
            "code generation",
            "machine composition",
            "reliable software",
            "topics covered",
            "theorem proving",
            "control visibility",
            "configuration management",
            "specification animation",
            "tools",
            "specification",
            "testing",
            "systems",
            "refinement",
            "maintenance",
            "inheritance",
            "implementation",
            "explore",
            "documentation",
            "development",
            "design",
            "dependence",
            "analysis"
        ],
        "courseDesc": "\"The B-Method is a rigorous mathematically based method for the development of reliable software. The method covers the complete software cycle from requirement s analysis through specification, design, implementation, testing, maintenance, and re-use. The B-Method is supported by the B-Toolkit: a collection tools of that provide for specification animation, proof obligation generation, theorem proving, configuration management, code generation, and documentation. The B-Method uses similar mathematical notation to Z, but does not use Z. Specifications are given in AMN  Abstract Machine Notation, which is a small abstract programmin g language. The B-Method is object based in the sense that systems of machines use a number of different forms of inheritance to control visibility and inherit operations. There is no dependence on a particular programming language, but the current code generator generates C. This course will explore the use of the B-Method and the B-Toolkit. The topics covered will include: The Abstract Machine Notation; Machine Composition; Refinement; Implementation; The method of presentation will use case studies to present the method; laboratory exercises to use the tools; a major project to apply all aspects of the method, and use of the tools.     \"",
        "similarCourses": [
            "COMP2111",
            "COMP2911",
            "COMP9242",
            "COMP9211",
            "COMP3153",
            "COMP3211",
            "COMP1531",
            "COMP9153",
            "COMP9018",
            "COMP9243",
            "COMP4161",
            "COMP9311",
            "COMP3141",
            "COMP9322",
            "COMP2121"
        ],
        "courseUrl": "https://www.handbook.unsw.edu.au/undergraduate/courses/2019/COMP9116"
    },
    "COMP9152": {
        "courseCode": "COMP9152",
        "skills": [
            "distributed systems e",
            "design decisions underlying",
            "modelling concurrent systems",
            "concurrent systems",
            "true concurrency",
            "temporal logic",
            "system behaviour",
            "semantic equivalences",
            "process algebra",
            "implementation relations",
            "event structures",
            "equivalence checking",
            "concurrency found",
            "computational perspectives",
            "art techniques",
            "successful models",
            "semantic models",
            "mathematical models",
            "design",
            "concurrent",
            "models",
            "mathematical",
            "state",
            "philosophical",
            "operational",
            "modal",
            "literature",
            "component",
            "complexity",
            "comparing",
            "algorithms"
        ],
        "courseDesc": "\"This course tries to make students familiar with state-of-the-art techniques in modelling concurrent systems. This is done by comparing some of the more successful models of concurrency found in the literature. The focus will be on the rationale behind the design decisions underlying those models, viewed from philosophical, mathematical and computational perspectives. The course contains important background knowledge for students aiming at a scientific career in which the design of mathematical models of system behaviour is a component.   Topics chosen from: semantic models of concurrent and distributed systems  e.g. process algebra, event structures, Petri nets, Chu spaces, operational and denotational semantics, semantic equivalences and implementation relations, linear versus branching time, interleaving versus partial order semantics, true concurrency, algorithms for equivalence checking and their complexity, modal and temporal logic for concurrent systems.     \"",
        "similarCourses": [
            "COMP6752",
            "COMP3152",
            "COMP4001",
            "COMP3151",
            "COMP9322",
            "COMP9418",
            "COMP9243",
            "COMP9313",
            "COMP9314",
            "COMP9511",
            "COMP3511",
            "COMP3222",
            "COMP9222",
            "COMP3121",
            "COMP4121"
        ],
        "courseUrl": "https://www.handbook.unsw.edu.au/undergraduate/courses/2019/COMP9152"
    },
    "COMP9153": {
        "courseCode": "COMP9153",
        "skills": [
            "describe several automatic verification techniques",
            "typically called algorithmic verification",
            "standard software engineering practice",
            "good software design alone",
            "fully automatic techniques",
            "mathematically sound techniques",
            "formal methods community",
            "automatic analysis",
            "several tools",
            "systematic testing",
            "code review",
            "tools",
            "systems",
            "system",
            "correctness",
            "application"
        ],
        "courseDesc": "\"This course replaces COMP4151, students can not receive credit for bothIt is virtually impossible to guarantee the correctness of a system, and in turn the absense of bugs by standard software engineering practice such as code review, systematic testing and good software design alone. The formal methods community has developed various rigorous, mathematically sound techniques and tools that allow the automatic analysis of systems and software. The application of these fully automatic techniques is typically called algorithmic verification.The course will describe several automatic verification techniques, the algoriths they are based on, and the tools that support them. We will discuss examples to which the techniques have been applied, and provide experience with the use of several tools.     \"",
        "similarCourses": [
            "COMP3153",
            "COMP6721",
            "COMP3141",
            "COMP9116",
            "COMP9334",
            "COMP2521",
            "COMP1531",
            "COMP9211",
            "COMP3211",
            "COMP4181",
            "COMP9181",
            "COMP2111",
            "COMP9322",
            "COMP1010",
            "COMP6442"
        ],
        "courseUrl": "https://www.handbook.unsw.edu.au/undergraduate/courses/2019/COMP9153"
    },
    "COMP9161": {
        "courseCode": "COMP9161",
        "skills": [
            "byte code approach",
            "automatic memory management",
            "programming language paradigms",
            "programming languages",
            "theoretical foundations",
            "strong typing",
            "object oriented",
            "implementation aspects",
            "component software",
            "syntax",
            "polymorphism",
            "overloading",
            "logic",
            "imperative",
            "dynamic",
            "declarative",
            "axiomatic",
            "architectures",
            "abstracting"
        ],
        "courseDesc": "\"Programming language paradigms: imperative, object oriented, declarative  i.e., functional and logic. Theoretical foundations of programming languages: syntax, operatational, axiomatic and denotational semantics. Implementation aspects of central language features, such as dynamic and strong typing, polymorphism, overloading and automatic memory management. Abstracting over programming languages and architectures: byte code approach, component software.     \"",
        "similarCourses": [
            "COMP9102",
            "COMP9021",
            "COMP3131",
            "COMP3411",
            "COMP3153",
            "COMP4141",
            "COMP9153",
            "COMP1917",
            "COMP3431",
            "COMP3311",
            "COMP4181",
            "COMP9181",
            "COMP6752",
            "COMP9152",
            "COMP1400"
        ],
        "courseUrl": "https://www.handbook.unsw.edu.au/undergraduate/courses/2019/COMP9161"
    },
    "COMP9171": {
        "courseCode": "COMP9171",
        "skills": [
            "standard template library e",
            "run time type information",
            "oriented inheritance techniques",
            "oriented programming",
            "advanced techniques",
            "generic programming",
            "exception handling",
            "efficiency issues",
            "templates",
            "memory",
            "functions",
            "containers"
        ],
        "courseDesc": "\"This course introduces the fundamentals and advanced techniques of object-oriented programming in C++.Object-oriented inheritance techniques. Advanced techniques with functions. Memory and resource managment. Namespaces. Run time type information. Templates and generic programming. C++ Template metaprogramming. The Standard Template Library  e.g., algorithms, containers and iterators. Input/Output wth C++ iostreams library. Exception handling. C++ and Efficiency issues. Effective C++ design guidelines.     \"",
        "similarCourses": [
            "COMP3171",
            "COMP6771",
            "COMP2511",
            "COMP3121",
            "COMP4001",
            "COMP4128",
            "COMP4129",
            "COMP9315",
            "COMP1521",
            "COMP4121",
            "COMP9102",
            "COMP3153",
            "COMP6448",
            "COMP3131",
            "COMP9153"
        ],
        "courseUrl": "https://www.handbook.unsw.edu.au/undergraduate/courses/2019/COMP9171"
    },
    "COMP9181": {
        "courseCode": "COMP9181",
        "skills": [
            "based test generators",
            "including security infrastructure software",
            "amss transport systems",
            "modern functional languages",
            "achieve high assurance",
            "software systems",
            "safety",
            "security infrastructure",
            "specific languages",
            "systems",
            "power grids",
            "financial applications",
            "software used",
            "security",
            "assurance",
            "trust",
            "specification",
            "domain"
        ],
        "courseDesc": "\"Trust in the safety and security of software systems is increasingly important with the use of software in systems where failure or sabotage can lead to loss of life or be very expensive  this includes medical and financial applications as well as software used for power grids, amss transport systems, and security infrastructure. This course covers language based safety engineering techniques advanced type systems, specification-based test generators, domain-specific languages, and prototyping for high-assurance. It demonstrates via concrete examples, including security infrastructure software, how modern functional languages are used to achieve high assurance, and conveys hands-on experience via practical assignments.     \"",
        "similarCourses": [
            "COMP4181",
            "COMP6441",
            "COMP6841",
            "COMP8522",
            "COMP6447",
            "COMP1531",
            "COMP1010",
            "COMP6442",
            "COMP9153",
            "COMP3153",
            "COMP3441",
            "COMP3141",
            "COMP9441",
            "COMP2041",
            "COMP4001"
        ],
        "courseUrl": "https://www.handbook.unsw.edu.au/undergraduate/courses/2019/COMP9181"
    },
    "COMP9201": {
        "courseCode": "COMP9201",
        "skills": [
            "operating system organisation",
            "case studies drawn",
            "distributed operating systems",
            "file systems",
            "virtual memory",
            "storage management",
            "programming assignments",
            "process management",
            "memory management",
            "disk scheduling",
            "scheduling",
            "synchronisation",
            "services",
            "segmentation",
            "security",
            "protection",
            "paging",
            "communication"
        ],
        "courseDesc": "\"Operating system organisation and services. Process management: scheduling, synchronisation and communication. Memory management: virtual memory, paging and segmentation. Storage management: Disk scheduling, file systems. Protection and Security. Distributed operating systems and file systems. Case studies drawn from UNIX, MS-DOS, Mach. Lab. programming assignments.     \"",
        "similarCourses": [
            "COMP3231",
            "COMP9243",
            "COMP9315",
            "COMP3311",
            "COMP9283",
            "COMP9242",
            "COMP3891",
            "COMP3441",
            "COMP9441",
            "COMP4920",
            "COMP6441",
            "COMP1521",
            "COMP6841",
            "COMP9447",
            "COMP1917"
        ],
        "courseUrl": "https://www.handbook.unsw.edu.au/undergraduate/courses/2019/COMP9201"
    },
    "COMP9211": {
        "courseCode": "COMP9211",
        "skills": [
            "sequential logic design principles",
            "simulate digital systems",
            "system level interconnect",
            "risc system",
            "modern processors",
            "memory subsystem",
            "architectural designs",
            "cad tools",
            "design",
            "tools",
            "verification",
            "validation",
            "simulation",
            "implementation",
            "architecture"
        ],
        "courseDesc": "\"Study the architecture & organisation of modern processors, and influences upon these, with emphasis on pipelined RISC machines; gain understanding of the design of the memory subsystem, I/O, and system level interconnect; become proficient in the use of tools such as VHDL and SimpleScalar for the description, simulation, and verification of architectural designs; complete a series of assignments leading to the design, implementation, validation and assessment of a RISC system. It is assumed students are familiar with combinational and sequential logic design principles and have some experience in the use of CAD tools to describe and simulate digital systems.     \"",
        "similarCourses": [
            "COMP3211",
            "COMP9242",
            "CourseCode",
            "COMP3222",
            "COMP9222",
            "COMP1531",
            "COMP9116",
            "COMP9322",
            "COMP9311",
            "COMP9018",
            "COMP3153",
            "COMP9243",
            "COMP9153",
            "COMP4601",
            "COMP3141"
        ],
        "courseUrl": "https://www.handbook.unsw.edu.au/undergraduate/courses/2019/COMP9211"
    },
    "COMP9222": {
        "courseCode": "COMP9222",
        "skills": [
            "art computer aided design tools",
            "digital systems computer systems",
            "design complex systems",
            "develop circuit solutions",
            "basic building blocks",
            "computer systems",
            "digital circuits",
            "sequential circuits",
            "problem solving",
            "hardware models",
            "describe circuits",
            "design",
            "digital",
            "state",
            "operation"
        ],
        "courseDesc": "\"This course aims to provide students with a knowledge of problem solving with digital systems  computer systems and digital circuits. The basic building blocks of combinational and sequential circuits are introduced to develop circuit solutions to problems and to understand and implement the design and operation of hardware models of digital and computer systems. HDLs will be used to describe circuits and state of the art computer aided design tools will be used to design complex systems.     \"",
        "similarCourses": [
            "COMP3222",
            "COMP9211",
            "COMP3211",
            "COMP4128",
            "COMP9101",
            "COMP9414",
            "COMP1010",
            "COMP6442",
            "COMP2911",
            "COMP9322",
            "COMP4511",
            "COMP3141",
            "COMP6441",
            "COMP4001",
            "COMP2511"
        ],
        "courseUrl": "https://www.handbook.unsw.edu.au/undergraduate/courses/2019/COMP9222"
    },
    "COMP9242": {
        "courseCode": "COMP9242",
        "skills": [
            "covers operating systems design",
            "os components",
            "persistent systems",
            "experimental systems",
            "level servers",
            "kernel implementation",
            "implementation issues",
            "hardware caches",
            "device drivers",
            "advanced level",
            "state",
            "security",
            "scheduling",
            "protection",
            "performance",
            "large"
        ],
        "courseDesc": "\"Covers operating systems design and implementation issues at an advanced level, focussing on specific issues such as performance and on current OS research areas. Topics selected from: Microkernels; user-level servers; performance; kernel implementation; device drivers; scheduling for real-time; effects and control of hardware caches; security and protection; persistent systems; security; dealing with large, sparse address spaces; experimental systems. A laboratory running a state-of-the-art microkernal system will be used to provide hands-on experience with low-level implementation of OS components.     \"",
        "similarCourses": [
            "COMP9243",
            "COMP9018",
            "COMP9311",
            "COMP9024",
            "COMP9211",
            "COMP1531",
            "COMP9116",
            "COMP3211",
            "COMP9444",
            "COMP9201",
            "COMP3231",
            "COMP4337",
            "COMP9337",
            "COMP9418",
            "COMP9945"
        ],
        "courseUrl": "https://www.handbook.unsw.edu.au/undergraduate/courses/2019/COMP9242"
    },
    "COMP9243": {
        "courseCode": "COMP9243",
        "skills": [
            "operating systems issues",
            "distributed shared memory",
            "distributed memory coherency",
            "distributed file systems",
            "distributed process management",
            "distributed systems",
            "distributed transactions",
            "process migration",
            "procedure call",
            "concurrency control",
            "server paradigm",
            "server"
        ],
        "courseDesc": "\"A detailed coverage of distributed systems, with a particular focus on operating systems issues: client-server paradigm, remote-procedure call as OS support for client-server; distributed shared memory, distributed memory coherency; distributed file systems; distributed process management, including load sharing and process migration; concurrency control; fault tolerance, recoverability and distributed transactions; naming; industry standards; case studies.     \"",
        "similarCourses": [
            "COMP9242",
            "COMP9018",
            "COMP9201",
            "COMP9311",
            "COMP3231",
            "COMP9024",
            "COMP9315",
            "COMP1531",
            "COMP9322",
            "COMP9334",
            "COMP9116",
            "COMP9211",
            "COMP3211",
            "COMP9444",
            "COMP6752"
        ],
        "courseUrl": "https://www.handbook.unsw.edu.au/undergraduate/courses/2019/COMP9243"
    },
    "COMP9283": {
        "courseCode": "COMP9283",
        "skills": [],
        "courseDesc": "\"As for COMP9201 Operating Systems but in greater depth and breadth.     \"",
        "similarCourses": [
            "COMP9801",
            "COMP9814",
            "COMP9844",
            "COMP3891",
            "COMP3821",
            "COMP9201",
            "COMP3231",
            "COMP1521",
            "COMP9243",
            "COMP9242",
            "COMP6441",
            "COMP9332",
            "COMP4181",
            "COMP9181",
            "COMP6841"
        ],
        "courseUrl": "https://www.handbook.unsw.edu.au/undergraduate/courses/2019/COMP9283"
    },
    "COMP9311": {
        "courseCode": "COMP9311",
        "skills": [
            "database application techniques",
            "database management systems",
            "data manipulation languages",
            "database design",
            "data modelling",
            "stored procedures",
            "advanced databases",
            "design",
            "implementation"
        ],
        "courseDesc": "\"A first course on database management systems. Data modelling; principles of database design; data manipulation languages; database application techniques; introduction to DBMS internals; introduction to advanced databases. Lab: design and implementation of a database application using SQL and stored procedures.     \"",
        "similarCourses": [
            "COMP3311",
            "COMP9242",
            "COMP9315",
            "COMP9018",
            "COMP1531",
            "COMP9243",
            "COMP9024",
            "COMP9322",
            "COMP9211",
            "COMP3211",
            "COMP4121",
            "COMP9116",
            "COMP1000",
            "COMP4314",
            "COMP9313"
        ],
        "courseUrl": "https://www.handbook.unsw.edu.au/undergraduate/courses/2019/COMP9311"
    },
    "COMP9313": {
        "courseCode": "COMP9313",
        "skills": [
            "manipulating big data e",
            "managing big data",
            "query languages e",
            "programming languages e",
            "big data analysis",
            "database systems e",
            "big bata",
            "text analysis",
            "dimensionality reduction",
            "streaming",
            "spark",
            "compression"
        ],
        "courseDesc": "\"This course introduces the core concepts and technologies involved in managing Big Data. Topics include: characteristics of Big Bata and Big Data analysis, storage systems  e.g. HDFS, S3, techniques for manipulating Big Data  e.g. MapReduce, streaming, compression, programming languages  e.g. Spark, PigLatin, query languages  e.g. Jaql, Hive, database systems  e.g. noSQL systems, HBase, and typical applications  e.g. recommender systems, dimensionality reduction, text analysis.     \"",
        "similarCourses": [
            "COMP9314",
            "COMP3311",
            "COMP9311",
            "COMP9319",
            "COMP6752",
            "COMP9152",
            "COMP3152",
            "COMP9315",
            "COMP9318",
            "COMP2521",
            "COMP4181",
            "COMP9181",
            "COMP9418",
            "COMP4141",
            "COMP1917"
        ],
        "courseUrl": "https://www.handbook.unsw.edu.au/undergraduate/courses/2019/COMP9313"
    },
    "COMP9314": {
        "courseCode": "COMP9314",
        "skills": [
            "manipulating big data e",
            "managing big data",
            "query languages e",
            "programming languages e",
            "big data analysis",
            "database systems e",
            "big bata",
            "text analysis",
            "dimensionality reduction",
            "streaming",
            "spark",
            "compression"
        ],
        "courseDesc": "\"This course introduces the core concepts and technologies involved in managing Big Data. Topics include: characteristics of Big Bata and Big Data analysis, storage systems  e.g. HDFS, S3, techniques for manipulating Big Data  e.g. MapReduce, streaming, compression, programming languages  e.g. Spark, PigLatin, query languages  e.g. Jaql, Hive, database systems  e.g. noSQL systems, HBase, typical applications  e.g. recommender systems, dimensionality reduction, text analysis.     \"",
        "similarCourses": [
            "COMP9313",
            "COMP3311",
            "COMP9311",
            "COMP9319",
            "COMP6752",
            "COMP9152",
            "COMP3152",
            "COMP9315",
            "COMP9318",
            "COMP2521",
            "COMP4181",
            "COMP9181",
            "COMP9418",
            "COMP4141",
            "COMP1917"
        ],
        "courseUrl": "https://www.handbook.unsw.edu.au/undergraduate/courses/2019/COMP9314"
    },
    "COMP9315": {
        "courseCode": "COMP9315",
        "skills": [
            "advanced file access methods",
            "distributed database systems",
            "database performance tuning",
            "transaction management",
            "query optimisation",
            "detailed examination",
            "relational",
            "oriented",
            "implementation"
        ],
        "courseDesc": "\"Detailed examination of techniques used in the implementation of relational, object-oriented and distributed database systems. Topics are drawn from: query optimisation, transaction management, advanced file access methods, database performance tuning.     \"",
        "similarCourses": [
            "COMP3311",
            "COMP9311",
            "COMP9201",
            "COMP9243",
            "COMP2511",
            "COMP3231",
            "COMP4001",
            "COMP4314",
            "COMP9334",
            "COMP1000",
            "COMP9018",
            "COMP9242",
            "COMP9313",
            "COMP9314",
            "COMP6441"
        ],
        "courseUrl": "https://www.handbook.unsw.edu.au/undergraduate/courses/2019/COMP9315"
    },
    "COMP9318": {
        "courseCode": "COMP9318",
        "skills": [
            "b implementing data warehouses",
            "materialized view selection",
            "b mining techniques",
            "mining spatial databases",
            "mining multimedia databases",
            "data cube computation",
            "data mining process",
            "data warehouses",
            "data mining",
            "web mining",
            "text mining",
            "data warehouse",
            "data model",
            "data extraction",
            "system architecture",
            "cleansing",
            "application"
        ],
        "courseDesc": "\"Data Warehouse:  a  Data Model for Data Warehouses.  b  Implementing Data Warehouses: data extraction, cleansing, transformation and loading, data cube computation, materialized view selection, OLAP query processing. Data Mining:  a  Fundamentals: data mining process and system architecture, relationship with data warehouse and OLAP systems, data pre-processing.  b  Mining Techniques and Application: association rules, mining spatial databases, mining multimedia databases, web mining, mining sequence and time-series data, text mining, etc. The lecture materials will be complemented by projects /assignments.     \"",
        "similarCourses": [
            "COMP9417",
            "COMP4314",
            "COMP6714",
            "COMP9319",
            "COMP3311",
            "COMP9311",
            "COMP9321",
            "COMP9313",
            "COMP9314",
            "COMP1927",
            "COMP9024",
            "COMP2521",
            "COMP1511",
            "COMP1521",
            "COMP4121"
        ],
        "courseUrl": "https://www.handbook.unsw.edu.au/undergraduate/courses/2019/COMP9318"
    },
    "COMP9319": {
        "courseCode": "COMP9319",
        "skills": [
            "information theory text compression zip",
            "indexing pattern matching",
            "data compression",
            "wheeler transform",
            "streaming algorithms",
            "adaptive coding"
        ],
        "courseDesc": "\"Data Compression:     Adaptive Coding, Information Theory   Text Compression  ZIP, GZIP, BZIP, etc    Burrows-Wheeler Transform and Backward Search   XML Compression     Search:     Indexing   Pattern Matching and Regular Expression Search   Distributed Querying   Fast Index Construction   Implementation     If time allows: Streaming Algorithms, On-Line Data Analytics The lecture materials will be complemented by projects and assignments.     \"",
        "similarCourses": [
            "COMP6714",
            "COMP3411",
            "COMP9318",
            "COMP9321",
            "COMP9313",
            "COMP9314",
            "COMP9024",
            "COMP6741",
            "COMP4129",
            "COMP6731",
            "COMP9243",
            "COMP4128",
            "COMP4314",
            "COMP9517",
            "COMP9414"
        ],
        "courseUrl": "https://www.handbook.unsw.edu.au/undergraduate/courses/2019/COMP9319"
    },
    "COMP9321": {
        "courseCode": "COMP9321",
        "skills": [
            "discusses web application development techniques",
            "remote method invocation",
            "web access",
            "building web",
            "several assignments",
            "expose students",
            "basic infrastructure",
            "databases"
        ],
        "courseDesc": "\"The goal of this course is to expose students to basic infrastructure for building web-based ecommerce applications. It discusses web application development techniques and enabling technologies including CGI scripts, remote method invocation, servlets, JSPs, Web access to databases, programmatic access to XML documents. The lecture materials will be complemented by several assignments and labs.     \"",
        "similarCourses": [
            "COMP4314",
            "COMP1531",
            "COMP6714",
            "COMP6443",
            "COMP6843",
            "COMP9323",
            "COMP9319",
            "COMP1000",
            "COMP9322",
            "COMP9318",
            "COMP9116",
            "COMP4181",
            "COMP9181",
            "COMP3153",
            "COMP2521"
        ],
        "courseUrl": "https://www.handbook.unsw.edu.au/undergraduate/courses/2019/COMP9321"
    },
    "COMP9322": {
        "courseCode": "COMP9322",
        "skills": [
            "ii apply web service composition techniques",
            "describe different architectural design approaches",
            "support semantic data modelling",
            "iv understand techniques",
            "scalable application platforms",
            "data modeling expertise",
            "semantic modelling",
            "securing apis",
            "complex structures",
            "business analysis",
            "design",
            "testing"
        ],
        "courseDesc": "\"The notion of &ldquo;software as a service&rdquo;  SaaS  plays a critical role in building distributed, scalable application platforms. This course arms students with the knowledge and expertise to design and engineer services using modern Web technologies. Based on Service Oriented Architecture  SOA  principles, students will be exposed to various design and implementation methodologies, including microservices and their associated design patterns, and API design and managment. In addition, this course will strengthen students&rsquo; data modeling expertise, covering topics on semantic modelling of both simple and complex structures, and its usage in business analysis. The course will also describe the technical standards and technologies that support semantic data modelling. After completing this course, students will be able to  i  describe different architectural design approaches and their role in engineering software.  ii  apply Web service composition techniques in a concrete setting,  iii  be competent in designing, managing, documenting, testing and securing APIs,  iv  understand techniques for semantic modelling of simple and complex structures, as well as their associated technical standards and technologies.     \"",
        "similarCourses": [
            "COMP1531",
            "COMP9311",
            "COMP9211",
            "COMP2521",
            "COMP6752",
            "COMP9152",
            "COMP3211",
            "COMP3152",
            "COMP9243",
            "COMP9323",
            "COMP9018",
            "COMP6443",
            "COMP4511",
            "COMP4001",
            "COMP4314"
        ],
        "courseUrl": "https://www.handbook.unsw.edu.au/undergraduate/courses/2019/COMP9322"
    },
    "COMP9323": {
        "courseCode": "COMP9323",
        "skills": [
            "3 developing software using agile software engineering methodologies",
            "5 developing appropriate testing strategies",
            "2 developing software",
            "large enterprise system",
            "integrated system",
            "separate components",
            "layers",
            "development",
            "collaboration",
            "build",
            "architectures"
        ],
        "courseDesc": "\"This course allows students to explore principles, techniques, architectures, and enabling technologies for the development of the different components and layers of complex SaaS systems. In particular, it discusses the processes related to  1  building a large enterprise system in collaboration with other project members,  2  developing software in a culture of participation,  3  developing software using agile software engineering methodologies,  4  integrating a number of separate components to build an integrated system, and  5  developing appropriate testing strategies and methodologies for given projects.     \"",
        "similarCourses": [
            "COMP1531",
            "COMP9322",
            "COMP3900",
            "COMP9900",
            "COMP9321",
            "COMP2911",
            "COMP4511",
            "COMP3141",
            "COMP4314",
            "COMP3431",
            "COMP2041",
            "COMP9116",
            "COMP4920",
            "COMP4930",
            "COMP4931"
        ],
        "courseUrl": "https://www.handbook.unsw.edu.au/undergraduate/courses/2019/COMP9323"
    },
    "COMP9331": {
        "courseCode": "COMP9331",
        "skills": [
            "substantial network programming component",
            "fundamental network security concepts",
            "address resolution using arp",
            "internet protocol suite overview",
            "transfer protocol ftp",
            "network layer services",
            "congestion control mechanisms",
            "application level protocols",
            "networking technology overview",
            "transport protocols tcp",
            "finite state automata",
            "11 wireless networks",
            "data link",
            "protocol design",
            "link state",
            "network layers",
            "validation using",
            "transport layer",
            "connecting networks",
            "routing algorithms",
            "distance vector",
            "peer networks",
            "overview",
            "conjunction",
            "addressing"
        ],
        "courseDesc": "\"Networking technology overview. Protocol design and validation using the finite state automata in conjunction with time-lines. Overview of the IEEE802 network data link protocol standards. Addressing at the data link and network layers. Network layer services. Introduction to routing algorithms such as Distance Vector and Link State. Congestion control mechanisms. Internetworking issues in connecting networks. The Internet Protocol suite overview. The Internet protocols IPv4 and IPv6. Address resolution using ARP and RARP. Transport layer: issues, transport protocols TCP and UDP. Application level protocols such as: File. Transfer Protocol  FTP, Domain Name System  DNS  and Simple Mail Transfer Protocol  SMTP. Introduction to fundamental network security concepts, 802.11 wireless networks and peer to peer networks. There is a substantial network programming component in the assessable material.     \"",
        "similarCourses": [
            "COMP3331",
            "COMP4335",
            "COMP9335",
            "COMP9332",
            "COMP9333",
            "COMP4337",
            "COMP9337",
            "COMP9444",
            "COMP9336",
            "COMP6841",
            "COMP6441",
            "COMP9417",
            "COMP4336",
            "COMP6733",
            "COMP1521"
        ],
        "courseUrl": "https://www.handbook.unsw.edu.au/undergraduate/courses/2019/COMP9331"
    },
    "COMP9332": {
        "courseCode": "COMP9332",
        "skills": [
            "substantial network programming component",
            "connection oriented networks",
            "advanced internet addressing",
            "packet switching networks",
            "exterior routing protocols",
            "atm networks",
            "switching architectures",
            "emerging switching",
            "routing technologies",
            "optical routing",
            "ip switching",
            "mobile ip",
            "classical ip",
            "atm solutions",
            "routing",
            "protocols",
            "overview",
            "algorithms"
        ],
        "courseDesc": "\"This course will focus on the routing and switching architectures, algorithms and protocols for packet switching networks, both connectionless and connection oriented networks  such as IP and ATM networks. Advanced Internet addressing : CIDR, VPN, NAT. In depth discussion of interior and exterior routing protocols, such BGP, OSPF. IP over ATM solutions : such as LANE, Classical IP over ATM. IP switching and MPLS. Mobile IP. Internet Multicasting. Overview of emerging switching and routing technologies, such as optical routing and QoS routing. There is a substantial network programming component in the assessable material, for which C prgramming knowledge is assumed.     \"",
        "similarCourses": [
            "COMP9331",
            "COMP3331",
            "COMP3601",
            "COMP9333",
            "COMP9336",
            "COMP4336",
            "COMP4337",
            "COMP9337",
            "COMP4335",
            "COMP9335",
            "COMP9444",
            "COMP9161",
            "COMP3891",
            "COMP6449",
            "COMP1521"
        ],
        "courseUrl": "https://www.handbook.unsw.edu.au/undergraduate/courses/2019/COMP9332"
    },
    "COMP9333": {
        "courseCode": "COMP9333",
        "skills": [
            "next generation internet architectures",
            "c programming knowledge",
            "network performance measurement",
            "network programming",
            "admission control",
            "network system",
            "protocols",
            "hands",
            "linux"
        ],
        "courseDesc": "\"This course teaches the fundamentals and practical solutions to quality of service  Qos  based networks, with an emphasis on the next generation Internet architectures and protocols. Topics include: scheduling policies  fair queueing, priority queueing etc., congestion avoidance/control schemes  RED, RIO etc, admission control, multimedia protocols  RTP, RTCP etc.This course will also cover recent Qos related developments by IETF/IEEE such as : Intserv, Diffserv, RSVP, LAN, Qos. There will be hands on practical labs on network performance measurement and some network programming. The assessment of the course includes a substantial hands on project on building a network system in Linux/FreeBSD environment. C programming knowledge is assumed for labs and the project.     \"",
        "similarCourses": [
            "COMP9331",
            "COMP3331",
            "COMP9332",
            "COMP3900",
            "COMP9900",
            "COMP4337",
            "COMP9337",
            "COMP4314",
            "COMP1521",
            "COMP2521",
            "COMP1917",
            "COMP3431",
            "COMP4335",
            "COMP9335",
            "COMP1511"
        ],
        "courseUrl": "https://www.handbook.unsw.edu.au/undergraduate/courses/2019/COMP9333"
    },
    "COMP9334": {
        "courseCode": "COMP9334",
        "skills": [
            "future workloads",
            "distributed systems",
            "designing systems",
            "analysis"
        ],
        "courseDesc": "\"Techniques for performance evaluation of distributed systems. These techniques will then be applied to designing systems to have good performance, and to the analysis of future workloads and the system changes required to cope with them.     \"",
        "similarCourses": [
            "COMP3153",
            "COMP9315",
            "COMP9153",
            "COMP9243",
            "COMP9945",
            "COMP9596",
            "COMP4601",
            "COMP9242",
            "COMP6721",
            "COMP6841",
            "COMP6441",
            "COMP9101",
            "COMP4511",
            "COMP1521",
            "COMP9511"
        ],
        "courseUrl": "https://www.handbook.unsw.edu.au/undergraduate/courses/2019/COMP9334"
    },
    "COMP9335": {
        "courseCode": "COMP9335",
        "skills": [
            "medium access control protocol",
            "routing protocol design",
            "minor design project",
            "deploying wireless mesh",
            "transport layer issues",
            "wireless mesh",
            "sensor networks",
            "important technologies",
            "leading industrial",
            "laboratory component",
            "important impact",
            "academic researchers",
            "significance",
            "security",
            "labelled",
            "application"
        ],
        "courseDesc": "\"Wireless mesh networks  WMNs  and wireless sensor networks  WSNs  are two emerging wireless technologies which will have important impact in the future. In fact, the significance of WSNs has led to it being labelled as one of the most important technologies in the 21st century.This course will cover the fundamental design principles behind building scalable WMNs and WSNs. The following aspects on wireless mesh and sensor networks will be covered: medium access control protocol, routing protocol design, transport layer issues, middleware, application and security. It will also cover case studies on deploying wireless mesh and sensor networks.This course includes a laboratory component and minor design project. It may also include guest lectures from leading industrial and academic researchers.     \"",
        "similarCourses": [
            "COMP4335",
            "COMP4337",
            "COMP9337",
            "COMP9331",
            "COMP3331",
            "COMP9336",
            "COMP9444",
            "COMP9332",
            "COMP4920",
            "COMP6733",
            "COMP4336",
            "COMP9333",
            "COMP3900",
            "COMP9900",
            "COMP9322"
        ],
        "courseUrl": "https://www.handbook.unsw.edu.au/undergraduate/courses/2019/COMP9335"
    },
    "COMP9336": {
        "courseCode": "COMP9336",
        "skills": [
            "learning emerging device functionalities",
            "powered wireless communication",
            "mobility affects networks",
            "mobile device programming",
            "device communication",
            "managing mobility",
            "ip networks",
            "mobile video",
            "mobile networking",
            "improving spectrum",
            "energy efficiency",
            "basic understanding",
            "achieving self",
            "systems",
            "realizing",
            "protocols",
            "enhancing",
            "applications",
            "android"
        ],
        "courseDesc": "\"This course will examine how mobility affects networks, systems, and applications. It will teach advanced concepts and protocols for managing mobility in TCP/IP networks, improving spectrum and energy efficiency of mobile networking, realizing more direct form of device-to-device communication, enhancing the quality of experience of mobile video, and achieving self-powered wireless communication. Learning emerging device functionalities and features will be part of this course, which requires some basic understanding of mobile device programming, such as Android and Java.     \"",
        "similarCourses": [
            "COMP4336",
            "COMP4337",
            "COMP9337",
            "COMP4335",
            "COMP9335",
            "COMP9332",
            "COMP9444",
            "COMP4001",
            "COMP9417",
            "COMP9331",
            "COMP3331",
            "COMP4411",
            "COMP1521",
            "COMP9333",
            "COMP9418"
        ],
        "courseUrl": "https://www.handbook.unsw.edu.au/undergraduate/courses/2019/COMP9336"
    },
    "COMP9337": {
        "courseCode": "COMP9337",
        "skills": [
            "secure routing protocols",
            "secure location discovery",
            "mac layer misbehaviours",
            "wireless technology emerges",
            "authentication servers radius",
            "building sensor networks",
            "wireless lan security",
            "traditional security attacks",
            "following key concepts",
            "wireless networks",
            "security vulnerabilities",
            "security becomes",
            "service attacks",
            "key management",
            "fundamental concepts",
            "broadcast authentication",
            "top priority",
            "securing ad",
            "laboratory component",
            "design project",
            "communications markets",
            "advanced issues",
            "solutions",
            "networking",
            "mainstream",
            "hands",
            "explore",
            "denial"
        ],
        "courseDesc": "\"As wireless technology emerges into the mainstream of the networking and communications markets, security becomes a top priority. This course will explore the security vulnerabilities in wireless networks and cover the fundamental concepts and advanced issues for building sensor networks. The following key concepts will be covered: Wireless LAN Security - Wired Equivalent Privacy  WEP, Wi-Fi Protected Access  WPA, Authentication Servers  RADIUS, 802.11i security standard; Securing Ad-Hoc Networks - MAC layer misbehaviours, secure routing protocols, denial of service attacks, key management, broadcast authentication, secure location discovery, non-traditional security attacks and solutions. This course includes a hands-on laboratory component and a design project.     \"",
        "similarCourses": [
            "COMP4337",
            "COMP4335",
            "COMP9335",
            "COMP6441",
            "COMP6841",
            "COMP6731",
            "COMP3441",
            "COMP9331",
            "COMP3331",
            "COMP9441",
            "COMP9447",
            "COMP9444",
            "COMP6443",
            "COMP9336",
            "COMP6733"
        ],
        "courseUrl": "https://www.handbook.unsw.edu.au/undergraduate/courses/2019/COMP9337"
    },
    "COMP9414": {
        "courseCode": "COMP9414",
        "skills": [
            "artificial intelligence programming language prolog",
            "natural language understanding",
            "natural language processing",
            "artificial intelligence",
            "search techniques",
            "problem solving",
            "machine learning",
            "expert systems",
            "computer vision",
            "robotics",
            "representation",
            "overview"
        ],
        "courseDesc": "\"Overview of Artificial Intelligence. Topics include: the representation of knowledge, search techniques, problem solving, machine learning, expert systems, natural language understanding, computer vision and an Artificial Intelligence programming language  Prolog or LISP. Students may be required to submit simple Art ificial Intelligence programs, or essays on an aspect of AI, for assessment, in areas such as robotics, computer vision, natural language processing, and machine learning.     \"",
        "similarCourses": [
            "COMP3411",
            "COMP4418",
            "COMP4411",
            "COMP2121",
            "COMP9032",
            "COMP9417",
            "COMP1521",
            "COMP9517",
            "COMP3222",
            "COMP9222",
            "COMP1917",
            "COMP9418",
            "COMP1911",
            "COMP9999",
            "COMP6841"
        ],
        "courseUrl": "https://www.handbook.unsw.edu.au/undergraduate/courses/2019/COMP9414"
    },
    "COMP9415": {
        "courseCode": "COMP9415",
        "skills": [
            "hidden surface removal",
            "user interfaces",
            "texture maps",
            "scan conversion",
            "programming assignments",
            "perspective transformation",
            "modelling curves",
            "hierarchical modelling",
            "graphics standards",
            "graphics hardware",
            "3d transformations",
            "2d transformations",
            "3d clipping",
            "clipping",
            "surfaces",
            "splines",
            "polygons",
            "objects",
            "lighting",
            "fractals"
        ],
        "courseDesc": "\"Graphics hardware: scan conversion of lines and polygons. 2D transformations: windowing, clipping, viewports. User interfaces. 3D transformations: perspective transformation, 3D clipping, hidden surface removal, lighting and texture maps. Hierarchical modelling of objects, modelling curves and surfaces with splines and fractals. Graphics standards. Lab: programming assignments.     \"",
        "similarCourses": [
            "COMP3421",
            "COMP9018",
            "COMP9021",
            "COMP9322",
            "COMP3411",
            "COMP9517",
            "COMP9201",
            "COMP1927",
            "COMP9311",
            "COMP1400",
            "COMP1917",
            "COMP9511",
            "COMP3231",
            "COMP3511",
            "COMP2111"
        ],
        "courseUrl": "https://www.handbook.unsw.edu.au/undergraduate/courses/2019/COMP9415"
    },
    "COMP9417": {
        "courseCode": "COMP9417",
        "skills": [
            "decision tree algorithms",
            "model tree algorithms",
            "neural network learning",
            "data mining technology",
            "machine learning algorithms",
            "machine learning",
            "model selection",
            "unsupervised learning",
            "rule learning",
            "lazy learning",
            "independent learning",
            "ensemble learning",
            "bayesian learning",
            "version spaces",
            "theoretical background",
            "kernel methods",
            "algorithmic approach",
            "regression",
            "performance",
            "gives",
            "evaluating",
            "clustering",
            "application",
            "algorithm"
        ],
        "courseDesc": "\"Machine learning is the algorithmic approach to learning from data. This course covers the key techniques in data mining technology, gives their theoretical background and shows their application. Topics include: decision tree algorithms  such as C4.5, regression and model tree algorithms, neural network learning, rule learning  such as association rules, lazy learning, version spaces, evaluating the performance of machine learning algorithms, Bayesian learning and model selection, algorithm-independent learning, ensemble learning, kernel methods, unsupervised learning  such as clustering  and inductive logic programming  relational learning      \"",
        "similarCourses": [
            "COMP3411",
            "COMP9418",
            "COMP9318",
            "COMP3431",
            "COMP9414",
            "COMP6733",
            "COMP4128",
            "COMP6845",
            "COMP6841",
            "COMP4411",
            "COMP6843",
            "COMP9336",
            "COMP6445",
            "COMP4336",
            "COMP9444"
        ],
        "courseUrl": "https://www.handbook.unsw.edu.au/undergraduate/courses/2019/COMP9417"
    },
    "COMP9418": {
        "courseCode": "COMP9418",
        "skills": [
            "statistical machine learning approaches",
            "structured probabilistic models",
            "probabilistic graphical models",
            "machine learning",
            "gaussian processes",
            "theory",
            "practice"
        ],
        "courseDesc": "\"This course provides an in-depth study of statistical machine learning approaches. The focus will be on methods for learning and inference in structured probabilistic models, with a healthy balance of theory and practice. It is aimed at postgraduate students and advanced undergraduates who are willing to be go beyond basic understanding of machine learning. The course provides fundamental support for those willing to intensify their knowledge in the area of big data analytics.   It will cover topics on exact and approximate inference in probabilistic graphical models; learning in structured latent variable models; posterior inference in non-parametric models based on Gaussian processes; and relational learning.         \"",
        "similarCourses": [
            "COMP9417",
            "COMP1531",
            "COMP9018",
            "COMP6752",
            "COMP9152",
            "COMP3152",
            "COMP9242",
            "COMP3411",
            "COMP9414",
            "COMP9511",
            "COMP3511",
            "COMP9021",
            "COMP9243",
            "COMP6714",
            "COMP3311"
        ],
        "courseUrl": "https://www.handbook.unsw.edu.au/undergraduate/courses/2019/COMP9418"
    },
    "COMP9441": {
        "courseCode": "COMP9441",
        "skills": [
            "public cryptographic protocols",
            "case studies drawn",
            "engineering secure systems",
            "applied computer security",
            "computer security",
            "social engineering",
            "security fails",
            "security analysis",
            "physical security",
            "intrusion detection",
            "digital forensics",
            "security",
            "honeypots",
            "hacking",
            "firewalls",
            "design",
            "cybercrime"
        ],
        "courseDesc": "\"Introduction to computer security, cybercrime, and cyberterror. The principles of engineering secure systems.Engineering secure systems. How security fails. Security analysis and design. Private and public cryptographic protocols. Physical security, social engineering, sniffing, intrusion detection, prevention and response, firewalls, honeypots. Digital forensics. Case studies drawn from the history of hacking and from current events.Additional topics drawn from recent developments and current research in applied computer security.No computing pre-requisites assumed, student need a keen devious and analytical mind.Please note that this course was revised at the end of 2009 from a level 2 to a level 0 courseStudents with a strong interest in security should also consider taking the complementary security courses COMP4442, COMP9447.     \"",
        "similarCourses": [
            "COMP3441",
            "COMP6441",
            "COMP6841",
            "COMP9447",
            "COMP4337",
            "COMP9337",
            "COMP6443",
            "COMP6447",
            "COMP6449",
            "COMP6843",
            "COMP9201",
            "COMP1511",
            "COMP4181",
            "COMP9181",
            "COMP6448"
        ],
        "courseUrl": "https://www.handbook.unsw.edu.au/undergraduate/courses/2019/COMP9441"
    },
    "COMP9444": {
        "courseCode": "COMP9444",
        "skills": [
            "restricted boltzmann machine",
            "neural networks",
            "recurrent networks",
            "deep learning",
            "semantic analysis",
            "language processing",
            "image processing",
            "complexity analysis"
        ],
        "courseDesc": "\"Topics chosen from: perceptrons, feedforward neural networks, backpropagation, Hopfield and Kohonen networks, restricted Boltzmann machine and autoencoders, deep convolutional networks for image processing; geometric and complexity analysis of trained neural networks; recurrent networks, language processing, semantic analysis, long short term memory; designing successful applications of neural networks; recent developments in neural networks and deep learning.     \"",
        "similarCourses": [
            "COMP9242",
            "COMP4337",
            "COMP9337",
            "COMP9018",
            "COMP9243",
            "COMP4335",
            "COMP9335",
            "COMP9336",
            "COMP4336",
            "COMP1521",
            "COMP9311",
            "COMP9024",
            "COMP3331",
            "COMP9331",
            "COMP9332"
        ],
        "courseUrl": "https://www.handbook.unsw.edu.au/undergraduate/courses/2019/COMP9444"
    },
    "COMP9447": {
        "courseCode": "COMP9447",
        "skills": [
            "cross site scripting attacks",
            "digital rights management",
            "code injection attacks",
            "service attacks",
            "computer security",
            "attacks",
            "security",
            "threats",
            "honeypots",
            "firewalls",
            "denial",
            "cybercrime",
            "cryptanalysis",
            "countermeasures"
        ],
        "courseDesc": "\"Applied workshop in computer security and cybercrime: attack, defense, auditing.The course will consist of a weekly seminar followed by a three hour per week workshop and lab session on the seminar topic. Topics are drawn from data sniffing, firewalls and attacks on firewalls, root-kits, exploits, denial of service attacks, intrusion detection systems, honeypots, malware, digital rights management, cryptanalysis, cross site scripting attacks, code injection attacks, threats and countermeasures, penetration testing, and current topics in security.     \"",
        "similarCourses": [
            "COMP6841",
            "COMP6441",
            "COMP3441",
            "COMP9441",
            "COMP6443",
            "COMP6843",
            "COMP4910",
            "COMP4911",
            "COMP4337",
            "COMP9337",
            "COMP9201",
            "COMP9315",
            "COMP3222",
            "COMP9222",
            "COMP6447"
        ],
        "courseUrl": "https://www.handbook.unsw.edu.au/undergraduate/courses/2019/COMP9447"
    },
    "COMP9511": {
        "courseCode": "COMP9511",
        "skills": [
            "human information processing system",
            "system interactions",
            "computer technologies",
            "models",
            "design",
            "analysis"
        ],
        "courseDesc": "\"Provides an introduction to user-system interactions, both analysis and design. The approach is cognitive, focusing on matching user goals with computer technologies. Topics: the human information processing system, models of interaction, strategies for and process of design, and evaluation. Project work is emphasised.     \"",
        "similarCourses": [
            "COMP3511",
            "COMP3900",
            "COMP9900",
            "COMP4511",
            "COMP3411",
            "COMP9021",
            "COMP1531",
            "COMP4920",
            "COMP9418",
            "COMP6752",
            "COMP9152",
            "COMP3152",
            "COMP2521",
            "COMP4129",
            "COMP3311"
        ],
        "courseUrl": "https://www.handbook.unsw.edu.au/undergraduate/courses/2019/COMP9511"
    },
    "COMP9517": {
        "courseCode": "COMP9517",
        "skills": [
            "template matching using classifiers",
            "local shading models",
            "satellite image analysis",
            "colour vision perception",
            "image pyramids",
            "based vision",
            "probabilistic methods",
            "medical imaging",
            "linear filters",
            "fourier transform",
            "model fitting",
            "segmentation",
            "robotics",
            "representation",
            "recognition",
            "modelling",
            "clustering",
            "cameras",
            "applications"
        ],
        "courseDesc": "\"Cameras and Radiometry, local shading models, Colour Vision perception, representation, modelling, linear filters for smoothing, edge detection using concvolution, fourier transform, scale and image pyramids, texture, segmentation by clustering, model fitting and probabilistic methods, tracking and Kalman filters, model-based vision, template matching using classifiers, recognition by relations, applications in robotics, medical imaging, satellite image analysis.     \"",
        "similarCourses": [
            "COMP3411",
            "COMP4411",
            "COMP9414",
            "COMP6752",
            "COMP9152",
            "COMP3152",
            "COMP1917",
            "COMP6714",
            "COMP9418",
            "COMP9417",
            "COMP9319",
            "COMP1911",
            "COMP9511",
            "COMP3421",
            "COMP9415"
        ],
        "courseUrl": "https://www.handbook.unsw.edu.au/undergraduate/courses/2019/COMP9517"
    },
    "COMP9596": {
        "courseCode": "COMP9596",
        "skills": [
            "distinction level performance"
        ],
        "courseDesc": "\"Students in their final semester of study in MIT  8543  have the option of replacing two courses with a 12UOC research project.To be able to enrol in COMP9596, students must meet the follwoing criteria: 1. Have completed  or have advanced standing in  72uoc; and 2. Have obtained agreement from a CSE academic supervisor; and 3. Have maintained a distinction level performance in the program.Projects are graded, and students deliver a seminar and submit a written report. More information is available in the Course Outline. Students should seek agreement from a supervisor prior to submitting a Project Nomination form to the CSE Student Office.     \"",
        "similarCourses": [
            "COMP9945",
            "COMP1511",
            "COMP4930",
            "COMP4931",
            "COMP4941",
            "COMP8552",
            "COMP8031",
            "COMP8032",
            "COMP8041",
            "COMP8042",
            "COMP8033",
            "COMP3901",
            "COMP3902",
            "COMP3900",
            "COMP9900"
        ],
        "courseUrl": "https://www.handbook.unsw.edu.au/undergraduate/courses/2019/COMP9596"
    },
    "COMP9801": {
        "courseCode": "COMP9801",
        "skills": [],
        "courseDesc": "\"As for COMP9101 but in greater depth and breadth.     \"",
        "similarCourses": [
            "COMP9814",
            "COMP9844",
            "COMP9283",
            "COMP3891",
            "COMP3821",
            "COMP9332",
            "COMP6441",
            "COMP1521",
            "COMP9116",
            "COMP6443",
            "COMP2521",
            "COMP6841",
            "COMP6445",
            "COMP6843",
            "COMP6845"
        ],
        "courseUrl": "https://www.handbook.unsw.edu.au/undergraduate/courses/2019/COMP9801"
    },
    "COMP9814": {
        "courseCode": "COMP9814",
        "skills": [],
        "courseDesc": "\"As for COMP9414 but in greater depth and breadth.     \"",
        "similarCourses": [
            "COMP9801",
            "COMP9844",
            "COMP9283",
            "COMP3891",
            "COMP3821",
            "COMP9332",
            "COMP6441",
            "COMP1521",
            "COMP9116",
            "COMP6443",
            "COMP2521",
            "COMP6841",
            "COMP6445",
            "COMP6843",
            "COMP6845"
        ],
        "courseUrl": "https://www.handbook.unsw.edu.au/undergraduate/courses/2019/COMP9814"
    },
    "COMP9844": {
        "courseCode": "COMP9844",
        "skills": [],
        "courseDesc": "\"As for COMP9444 but in greater depth and breadth.     \"",
        "similarCourses": [
            "COMP9801",
            "COMP9814",
            "COMP9283",
            "COMP3891",
            "COMP3821",
            "COMP9332",
            "COMP6441",
            "COMP1521",
            "COMP9116",
            "COMP6443",
            "COMP2521",
            "COMP6841",
            "COMP6445",
            "COMP6843",
            "COMP6845"
        ],
        "courseUrl": "https://www.handbook.unsw.edu.au/undergraduate/courses/2019/COMP9844"
    },
    "COMP9900": {
        "courseCode": "COMP9900",
        "skills": [
            "software project management",
            "capstone software project",
            "world software system",
            "software system",
            "teamwork strategies"
        ],
        "courseDesc": "\"A capstone software project. Students work in teams to define, implement and evaluate a real-world software system. Most of the work in this course is team-based project work, although there are some introductory lectures on software project management and teamwork strategies. Project teams meet fortnightly with project mentors to report on the progress of the project. Assessment is based on a project proposal, a final project demonstration and report, and on the quality of the software system itself. Students are also required to reflect on their work and to provide peer assessment of their team-mates' contributions to the project.     \"",
        "similarCourses": [
            "COMP3900",
            "COMP3901",
            "COMP1531",
            "COMP3902",
            "COMP4920",
            "COMP3601",
            "COMP4930",
            "COMP4931",
            "COMP9511",
            "COMP3511",
            "COMP9333",
            "COMP6843",
            "COMP9323",
            "COMP9945",
            "COMP9596"
        ],
        "courseUrl": "https://www.handbook.unsw.edu.au/undergraduate/courses/2019/COMP9900"
    },
    "COMP9945": {
        "courseCode": "COMP9945",
        "skills": [
            "distinction level performance"
        ],
        "courseDesc": "\"Students in their final semester of study in MIT  8543  have the option of replacing three courses with a 18UOC research project.To be able to enrol in COMP9945, students must meet the following criteria: 1. Have completed  or have advanced standing in  72uoc; and 2. Have obtained agreement from a CSE academic supervisor; and 3. Have maintained a distinction level performance in the program.Projects are graded, and students deliver a seminar and submit a written report. More information is available in the Course Outline. Students should seek agreement from a supervisor prior to submitting a Project Nomination form to the CSE Student Office.     \"",
        "similarCourses": [
            "COMP9596",
            "COMP1511",
            "COMP4941",
            "COMP8552",
            "COMP8031",
            "COMP8032",
            "COMP8041",
            "COMP8042",
            "COMP8033",
            "COMP3901",
            "COMP4930",
            "COMP4931",
            "COMP3902",
            "COMP4910",
            "COMP4911"
        ],
        "courseUrl": "https://www.handbook.unsw.edu.au/undergraduate/courses/2019/COMP9945"
    },
    "COMP9999": {
        "courseCode": "COMP9999",
        "skills": [
            "aboriginal art",
            "understanding",
            "patterns"
        ],
        "courseDesc": "\"The way we see the patterns of Australian art has been shaped by exhibitions as well as conventional art histories. This course therefore serves as an examination of the broad sweep of Australian art and the way exhibitions in public galleries have shaped  and continue to shape  our understanding of the art of this country. Although the course will look at some of the earlier interpretations of Australian art, it will concentrate on the new curatorial scholarship that has emerged since the 1970s.   Questions that will be examined include the repositioning of Aboriginal art as being central to any understanding of Australian visual culture, the gradual inclusion of women in the narrative; the growing awareness that the arts can reflect the concerns of the broad spectrum of Australian society.   Test     \"",
        "similarCourses": [
            "COMP6721",
            "COMP9414",
            "COMP3222",
            "COMP9222",
            "COMP1010",
            "COMP6442",
            "COMP2521",
            "COMP3153",
            "COMP9153",
            "COMP8522",
            "COMP6741",
            "COMP3141",
            "COMP6445",
            "COMP6845",
            "COMP4511"
        ],
        "courseUrl": "https://www.handbook.unsw.edu.au/undergraduate/courses/2019/COMP9999"
    }
}